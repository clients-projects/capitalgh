{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/niscolinx/projects/fxcryptotokeninvestment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/niscolinx/projects/fxcryptotokeninvestment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AbsorberInstance = void 0;\n\nvar Utils_1 = require(\"../../Utils\");\n\nvar Vector_1 = require(\"../../Core/Particle/Vector\");\n\nvar Enums_1 = require(\"../../Enums\");\n\nvar AbsorberInstance = /*#__PURE__*/function () {\n  function AbsorberInstance(absorbers, container, options, position) {\n    _classCallCheck(this, AbsorberInstance);\n\n    var _a, _b, _c, _d, _e;\n\n    this.absorbers = absorbers;\n    this.container = container;\n    this.initialPosition = position ? Vector_1.Vector.create(position.x, position.y) : undefined;\n    this.options = options;\n    this.dragging = false;\n    this.name = this.options.name;\n    this.opacity = this.options.opacity;\n    this.size = (0, Utils_1.getRangeValue)(options.size.value) * container.retina.pixelRatio;\n    this.mass = this.size * options.size.density * container.retina.reduceFactor;\n    var limit = options.size.limit;\n    this.limit = typeof limit === \"number\" ? {\n      radius: limit * container.retina.pixelRatio * container.retina.reduceFactor,\n      mass: 0\n    } : {\n      radius: ((_a = limit === null || limit === void 0 ? void 0 : limit.radius) !== null && _a !== void 0 ? _a : 0) * container.retina.pixelRatio * container.retina.reduceFactor,\n      mass: (_b = limit === null || limit === void 0 ? void 0 : limit.mass) !== null && _b !== void 0 ? _b : 0\n    };\n    var color = typeof options.color === \"string\" ? {\n      value: options.color\n    } : options.color;\n    this.color = (_c = (0, Utils_1.colorToRgb)(color)) !== null && _c !== void 0 ? _c : {\n      b: 0,\n      g: 0,\n      r: 0\n    };\n    this.position = (_e = (_d = this.initialPosition) === null || _d === void 0 ? void 0 : _d.copy()) !== null && _e !== void 0 ? _e : this.calcPosition();\n  }\n\n  _createClass(AbsorberInstance, [{\n    key: \"attract\",\n    value: function attract(particle) {\n      var container = this.container;\n      var options = this.options;\n\n      if (options.draggable) {\n        var mouse = container.interactivity.mouse;\n\n        if (mouse.clicking && mouse.downPosition) {\n          var mouseDist = (0, Utils_1.getDistance)(this.position, mouse.downPosition);\n\n          if (mouseDist <= this.size) {\n            this.dragging = true;\n          }\n        } else {\n          this.dragging = false;\n        }\n\n        if (this.dragging && mouse.position) {\n          this.position.x = mouse.position.x;\n          this.position.y = mouse.position.y;\n        }\n      }\n\n      var pos = particle.getPosition();\n\n      var _ref = (0, Utils_1.getDistances)(this.position, pos),\n          dx = _ref.dx,\n          dy = _ref.dy,\n          distance = _ref.distance;\n\n      var v = Vector_1.Vector.create(dx, dy);\n      v.length = this.mass / Math.pow(distance, 2) * container.retina.reduceFactor;\n\n      if (distance < this.size + particle.getRadius()) {\n        var sizeFactor = particle.getRadius() * 0.033 * container.retina.pixelRatio;\n\n        if (this.size > particle.getRadius() && distance < this.size - particle.getRadius() || particle.absorberOrbit !== undefined && particle.absorberOrbit.length < 0) {\n          if (options.destroy) {\n            particle.destroy();\n          } else {\n            particle.needsNewPosition = true;\n            this.updateParticlePosition(particle, v);\n          }\n        } else {\n          if (options.destroy) {\n            particle.size.value -= sizeFactor;\n          }\n\n          this.updateParticlePosition(particle, v);\n        }\n\n        if (this.limit.radius <= 0 || this.size < this.limit.radius) {\n          this.size += sizeFactor;\n        }\n\n        if (this.limit.mass <= 0 || this.mass < this.limit.mass) {\n          this.mass += sizeFactor * this.options.size.density * container.retina.reduceFactor;\n        }\n      } else {\n        this.updateParticlePosition(particle, v);\n      }\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      var initialPosition = this.initialPosition;\n      this.position = initialPosition && (0, Utils_1.isPointInside)(initialPosition, this.container.canvas.size) ? initialPosition : this.calcPosition();\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(context) {\n      context.translate(this.position.x, this.position.y);\n      context.beginPath();\n      context.arc(0, 0, this.size, 0, Math.PI * 2, false);\n      context.closePath();\n      context.fillStyle = (0, Utils_1.getStyleFromRgb)(this.color, this.opacity);\n      context.fill();\n    }\n  }, {\n    key: \"calcPosition\",\n    value: function calcPosition() {\n      var _a, _b;\n\n      var container = this.container;\n      var percentPosition = this.options.position;\n      return Vector_1.Vector.create(((_a = percentPosition === null || percentPosition === void 0 ? void 0 : percentPosition.x) !== null && _a !== void 0 ? _a : Math.random() * 100) / 100 * container.canvas.size.width, ((_b = percentPosition === null || percentPosition === void 0 ? void 0 : percentPosition.y) !== null && _b !== void 0 ? _b : Math.random() * 100) / 100 * container.canvas.size.height);\n    }\n  }, {\n    key: \"updateParticlePosition\",\n    value: function updateParticlePosition(particle, v) {\n      var _a;\n\n      if (particle.destroyed) {\n        return;\n      }\n\n      var container = this.container;\n      var canvasSize = container.canvas.size;\n\n      if (particle.needsNewPosition) {\n        particle.position.x = Math.floor(Math.random() * canvasSize.width);\n        particle.position.y = Math.floor(Math.random() * canvasSize.height);\n        particle.velocity.setTo(particle.initialVelocity);\n        particle.absorberOrbit = undefined;\n        particle.needsNewPosition = false;\n      }\n\n      if (this.options.orbits) {\n        if (particle.absorberOrbit === undefined) {\n          particle.absorberOrbit = Vector_1.Vector.create(0, 0);\n          particle.absorberOrbit.length = (0, Utils_1.getDistance)(particle.getPosition(), this.position);\n          particle.absorberOrbit.angle = Math.random() * Math.PI * 2;\n        }\n\n        if (particle.absorberOrbit.length <= this.size && !this.options.destroy) {\n          var minSize = Math.min(canvasSize.width, canvasSize.height);\n          particle.absorberOrbit.length = minSize * (1 + (Math.random() * 0.2 - 0.1));\n        }\n\n        if (particle.absorberOrbitDirection === undefined) {\n          particle.absorberOrbitDirection = particle.velocity.x >= 0 ? Enums_1.RotateDirection.clockwise : Enums_1.RotateDirection.counterClockwise;\n        }\n\n        var orbitRadius = particle.absorberOrbit.length;\n        var orbitAngle = particle.absorberOrbit.angle;\n        var orbitDirection = particle.absorberOrbitDirection;\n        particle.velocity.x = 0;\n        particle.velocity.y = 0;\n        var updateFunc = {\n          x: orbitDirection === Enums_1.RotateDirection.clockwise ? Math.cos : Math.sin,\n          y: orbitDirection === Enums_1.RotateDirection.clockwise ? Math.sin : Math.cos\n        };\n        particle.position.x = this.position.x + orbitRadius * updateFunc.x(orbitAngle);\n        particle.position.y = this.position.y + orbitRadius * updateFunc.y(orbitAngle);\n        particle.absorberOrbit.length -= v.length;\n        particle.absorberOrbit.angle += ((_a = particle.retina.moveSpeed) !== null && _a !== void 0 ? _a : 0) * container.retina.pixelRatio / 100 * container.retina.reduceFactor;\n      } else {\n        var addV = Vector_1.Vector.origin;\n        addV.length = v.length;\n        addV.angle = v.angle;\n        particle.velocity.addTo(addV);\n      }\n    }\n  }]);\n\n  return AbsorberInstance;\n}();\n\nexports.AbsorberInstance = AbsorberInstance;","map":null,"metadata":{},"sourceType":"script"}