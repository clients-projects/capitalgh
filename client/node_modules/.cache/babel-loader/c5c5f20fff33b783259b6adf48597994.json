{"ast":null,"code":"import _objectSpread from \"/home/niscolinx/projects/fxcrypto/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/niscolinx/projects/fxcrypto/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/niscolinx/projects/fxcrypto/client/src/containers/ForgotPassword.js\";\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport ReactParticles from '../components/ReactParticles';\nimport * as orderAction from '../store/actions/burgerIndex';\nimport Button from '../main/Button';\nimport Input from '../main/Input';\nimport { required, email } from '../util/validators';\nimport Auth from '../main/auth/Auth';\n\nconst Login = props => {\n  const _useState = useState({\n    loginForm: {\n      email: {\n        value: '',\n        valid: false,\n        touched: false,\n        validators: [required, email]\n      },\n      formIsValid: false\n    }\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        state = _useState2[0],\n        setState = _useState2[1];\n\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        message = _useState4[0],\n        setMessage = _useState4[1];\n\n  useEffect(() => {\n    if (props.err) {\n      setMessage({\n        error: props.err.page === 'login' ? props.err.error[0].message : null\n      });\n    } else if (props.tokenId) {\n      props.history.push('/admin/dashboard');\n      setMessage({\n        success: 'Success'\n      });\n    }\n  }, [props]);\n\n  const inputChangeHandler = (input, value) => {\n    setState(prevState => {\n      let isValid = true;\n\n      for (const validator of prevState.loginForm[input].validators) {\n        isValid = isValid && validator(value);\n      }\n\n      const updatedForm = _objectSpread({}, prevState.loginForm, {\n        [input]: _objectSpread({}, prevState.loginForm[input], {\n          valid: isValid,\n          value: value,\n          touched: true\n        })\n      });\n\n      let formIsValid = true;\n\n      for (const inputName in updatedForm) {\n        if (inputName !== 'formIsValid' && inputName !== '[object Object]') {\n          formIsValid = formIsValid && updatedForm[inputName].valid;\n        }\n      }\n\n      return {\n        loginForm: updatedForm,\n        formIsValid: formIsValid\n      };\n    });\n  };\n\n  const inputBlurHandler = input => {};\n\n  const handleLogin = e => {\n    e.preventDefault();\n\n    if (state.formIsValid) {\n      setMessage({\n        success: 'Your recovery link has been sent to your email'\n      });\n    } else {\n      setMessage({\n        error: 'Wrong Input, please check your entries'\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Particles, {\n    className: \"particles\",\n    params: {\n      particles: {\n        number: {\n          value: 20\n        }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Auth, {\n    login: true,\n    message: message,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"form__heading form__heading--forgottenPassword\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }\n  }, \"Retrive Password\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleLogin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    id: \"email\",\n    label: \"E-Mail\",\n    type: \"email\",\n    control: \"input\",\n    onChange: inputChangeHandler,\n    onBlur: inputBlurHandler.bind('email'),\n    value: state.loginForm['email'].value,\n    valid: state.loginForm['email'].valid,\n    touched: state.loginForm['email'].touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    design: \"raised\",\n    type: \"submit\",\n    loading: props.loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 25\n    }\n  }, props.loading ? 'Loading...' : 'Send')))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.user.loading,\n    err: state.auth.error,\n    tokenId: state.auth.tokenId,\n    userId: state.auth.userId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onInitLogin: (email, password) => dispatch(orderAction.initLogin(email, password))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","map":{"version":3,"sources":["/home/niscolinx/projects/fxcrypto/client/src/containers/ForgotPassword.js"],"names":["React","useState","useEffect","connect","ReactParticles","orderAction","Button","Input","required","email","Auth","Login","props","loginForm","value","valid","touched","validators","formIsValid","state","setState","message","setMessage","err","error","page","tokenId","history","push","success","inputChangeHandler","input","prevState","isValid","validator","updatedForm","inputName","inputBlurHandler","handleLogin","e","preventDefault","particles","number","bind","loading","mapStateToProps","user","auth","userId","mapDispatchToProps","dispatch","onInitLogin","password","initLogin"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport ReactParticles from '../components/ReactParticles'\nimport * as orderAction from '../store/actions/burgerIndex'\n\nimport Button from '../main/Button'\nimport Input from '../main/Input'\n\nimport { required, email } from '../util/validators'\nimport Auth from '../main/auth/Auth'\n\nconst Login = (props) => {\n    const [state, setState] = useState({\n        loginForm: {\n            email: {\n                value: '',\n                valid: false,\n                touched: false,\n                validators: [required, email],\n            },\n            formIsValid: false,\n        },\n    })\n\n    const [message, setMessage] = useState(null)\n\n    useEffect(() => {\n        if (props.err) {\n            setMessage({\n                error:\n                    props.err.page === 'login'\n                        ? props.err.error[0].message\n                        : null,\n            })\n        } else if (props.tokenId) {\n            props.history.push('/admin/dashboard')\n            setMessage({\n                success: 'Success',\n            })\n        }\n    }, [props])\n\n    const inputChangeHandler = (input, value) => {\n        setState((prevState) => {\n            let isValid = true\n            for (const validator of prevState.loginForm[input].validators) {\n                isValid = isValid && validator(value)\n            }\n\n            const updatedForm = {\n                ...prevState.loginForm,\n                [input]: {\n                    ...prevState.loginForm[input],\n                    valid: isValid,\n                    value: value,\n                    touched: true,\n                },\n            }\n            let formIsValid = true\n            for (const inputName in updatedForm) {\n                if (\n                    inputName !== 'formIsValid' &&\n                    inputName !== '[object Object]'\n                ) {\n                    formIsValid = formIsValid && updatedForm[inputName].valid\n                }\n            }\n            return {\n                loginForm: updatedForm,\n                formIsValid: formIsValid,\n            }\n        })\n    }\n\n    const inputBlurHandler = (input) => {}\n\n    const handleLogin = (e) => {\n        e.preventDefault()\n        if (state.formIsValid) {\n            setMessage({\n                success: 'Your recovery link has been sent to your email',\n            })\n        } else {\n            setMessage({ error: 'Wrong Input, please check your entries' })\n        }\n    }\n\n    return (\n        <>\n            <Particles\n                className='particles'\n                params={{\n                    particles: {\n                        number: {\n                            value: 20,\n                        },\n                    },\n                }}\n            />\n            <Auth login message={message}>\n                <h1 className='form__heading form__heading--forgottenPassword'>\n                    Retrive Password\n                </h1>\n                <form onSubmit={handleLogin}>\n                    <Input\n                        id='email'\n                        label='E-Mail'\n                        type='email'\n                        control='input'\n                        onChange={inputChangeHandler}\n                        onBlur={inputBlurHandler.bind('email')}\n                        value={state.loginForm['email'].value}\n                        valid={state.loginForm['email'].valid}\n                        touched={state.loginForm['email'].touched}\n                    />\n                    <div className='form-btn'>\n                        <Button\n                            design='raised'\n                            type='submit'\n                            loading={props.loading}\n                        >\n                            {props.loading ? 'Loading...' : 'Send'}\n                        </Button>\n                    </div>\n                </form>\n            </Auth>\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        loading: state.user.loading,\n        err: state.auth.error,\n        tokenId: state.auth.tokenId,\n        userId: state.auth.userId,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onInitLogin: (email, password) =>\n            dispatch(orderAction.initLogin(email, password)),\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Login)\n"]},"metadata":{},"sourceType":"module"}