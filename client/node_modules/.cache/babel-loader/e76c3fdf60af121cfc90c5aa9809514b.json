{"ast":null,"code":"import _slicedToArray from \"/home/niscolinx/projects/fxcrypto/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/niscolinx/projects/fxcrypto/client/src/views/siteOwner/InvestmentRequest.jsx\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Grid, Row, Col, Table } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/actions/burgerIndex';\nimport Card from '../../components/Card/Card'; //import { thWithdrawalArray, tdWithdrawalArray } from '../../variables/Variables'\n\nconst thInvestmentRequestArray = ['No', 'Username', 'Amount', 'Plan', 'Currency', 'Status', 'Date'];\n\nconst PendingDeposits = props => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        userPendingDeposit = _useState2[0],\n        setUserPendingDeposit = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        loadedDeposits = _useState4[0],\n        setLoadedDeposits = _useState4[1];\n\n  const gottenUserPendingDeposit = useRef();\n  useEffect(() => {\n    if (!gottenUserPendingDeposit.current) {\n      if (props.tokenId) {\n        props.onInitGetFunds(props.tokenId);\n      }\n\n      gottenUserPendingDeposit.current = true;\n    } else {\n      if (props.pendingDeposit) {\n        setUserPendingDeposit(props.pendingDeposit);\n      }\n    }\n  }, [props, userPendingDeposit]);\n  useEffect(() => {\n    if (userPendingDeposit.length > 0) {\n      setLoadedDeposits(true);\n    }\n  }, [userPendingDeposit]);\n\n  const handleApproval = id => {\n    for (let i = 0; i < props.idsOfPendingDeposits.length; i++) {\n      if (id === i) {\n        return props.onInitInvestNowApproval(props.idsOfPendingDeposits[i]._id, props.tokenId);\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    plain: true,\n    title: \"Investment Requests\",\n    category: \"Users that want to purchase a package\",\n    ctTableFullWidth: true,\n    ctTableResponsive: true,\n    content: /*#__PURE__*/React.createElement(Table, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 41\n      }\n    }, thInvestmentRequestArray.map((prop, key) => {\n      return /*#__PURE__*/React.createElement(\"th\", {\n        key: key,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 57\n        }\n      }, prop);\n    }))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 37\n      }\n    }, userPendingDeposit.map((prop, key) => {\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        key: key,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 49\n        }\n      }, Object.values(prop).map(prop => {\n        return /*#__PURE__*/React.createElement(\"td\", {\n          key: key,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 65\n          }\n        }, prop);\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        className: loadedDeposits && prop.status === 'Approved' ? 'btn1 btn1__approved' : 'btn1',\n        onClick: () => handleApproval(key),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 53\n        }\n      }, props.loading ? 'Loading...' : loadedDeposits && prop.status === 'Approved' ? 'approved' : 'approve'));\n    }))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 25\n    }\n  })))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.user.loading,\n    fundLoading: state.fundAccount.loading,\n    err: state.auth.error,\n    tokenId: state.auth.tokenId,\n    userId: state.auth.userId,\n    investNowApprovalSuccess: state.fundAccount.fundAccountApprovalSuccess,\n    idsOfPendingDeposits: state.fundAccount.idsOfPendingDeposits,\n    pendingDeposit: state.fundAccount.pendingDeposit\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onInitGetFunds: token => dispatch(actions.initGetFunds(token)),\n    onInitInvestNowApproval: (id, token) => dispatch(actions.initInvestNowApproval(id, token))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PendingDeposits);","map":{"version":3,"sources":["/home/niscolinx/projects/fxcrypto/client/src/views/siteOwner/InvestmentRequest.jsx"],"names":["React","useState","useEffect","useRef","Grid","Row","Col","Table","connect","actions","Card","thInvestmentRequestArray","PendingDeposits","props","userPendingDeposit","setUserPendingDeposit","loadedDeposits","setLoadedDeposits","gottenUserPendingDeposit","current","tokenId","onInitGetFunds","pendingDeposit","length","handleApproval","id","i","idsOfPendingDeposits","onInitInvestNowApproval","_id","map","prop","key","Object","values","status","loading","mapStateToProps","state","user","fundLoading","fundAccount","err","auth","error","userId","investNowApprovalSuccess","fundAccountApprovalSuccess","mapDispatchToProps","dispatch","token","initGetFunds","initInvestNowApproval"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport { Grid, Row, Col, Table } from 'react-bootstrap'\nimport { connect } from 'react-redux'\n\nimport * as actions from '../../store/actions/burgerIndex'\n\nimport Card from '../../components/Card/Card'\n//import { thWithdrawalArray, tdWithdrawalArray } from '../../variables/Variables'\n\nconst thInvestmentRequestArray = [\n    'No',\n    'Username',\n    'Amount',\n    'Plan',\n    'Currency',\n    'Status',\n    'Date',\n]\n\nconst PendingDeposits = (props) => {\n    const [userPendingDeposit, setUserPendingDeposit] = useState([])\n    const [loadedDeposits, setLoadedDeposits] = useState(false)\n\n    const gottenUserPendingDeposit = useRef()\n    useEffect(() => {\n        if (!gottenUserPendingDeposit.current) {\n            if (props.tokenId) {\n                props.onInitGetFunds(props.tokenId)\n            }\n            gottenUserPendingDeposit.current = true\n        } else {\n            if (props.pendingDeposit) {\n                setUserPendingDeposit(props.pendingDeposit)\n            }\n        }\n    }, [props, userPendingDeposit])\n\n    useEffect(() => {\n        if (userPendingDeposit.length > 0) {\n            setLoadedDeposits(true)\n        }\n    }, [userPendingDeposit])\n\n    const handleApproval = (id) => {\n        for (let i = 0; i < props.idsOfPendingDeposits.length; i++) {\n            if (id === i) {\n                return props.onInitInvestNowApproval(\n                    props.idsOfPendingDeposits[i]._id,\n                    props.tokenId\n                )\n            }\n        }\n    }\n\n   \n    return (\n        <div className='content'>\n            <Grid fluid>\n                <Row>\n                    <Col md={12}>\n                        <Card\n                            plain\n                            title='Investment Requests'\n                            category='Users that want to purchase a package'\n                            ctTableFullWidth\n                            ctTableResponsive\n                            content={\n                                <Table>\n                                    <thead>\n                                        <tr>\n                                            {thInvestmentRequestArray.map(\n                                                (prop, key) => {\n                                                    return (\n                                                        <th key={key}>\n                                                            {prop}\n                                                        </th>\n                                                    )\n                                                }\n                                            )}\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {userPendingDeposit.map((prop, key) => {\n                                            \n                                            return (\n                                                <tr key={key}>\n                                                    {Object.values(prop).map(\n                                                        (prop) => {\n                                                            return (\n                                                                <td key={key}>\n                                                                    {prop}\n                                                                </td>\n                                                               \n                                                            )\n                                                        }\n                                                    )}\n                                                    <button\n                                                        className={\n                                                            loadedDeposits &&\n                                                            prop.status ===\n                                                                'Approved'\n                                                                ? 'btn1 btn1__approved'\n                                                                : 'btn1'\n                                                        }\n                                                        onClick={() =>\n                                                            handleApproval(key)\n                                                        }\n                                                    >\n                                                        {props.loading\n                                                            ? 'Loading...'\n                                                            : loadedDeposits &&\n                                                              prop.status ===\n                                                                  'Approved'\n                                                            ? 'approved'\n                                                            : 'approve'}\n                                                    </button>\n                                                </tr>\n                                            )\n                                        })}\n                                    </tbody>\n                                </Table>\n                            }\n                        />\n                    </Col>\n                </Row>\n            </Grid>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        loading: state.user.loading,\n        fundLoading: state.fundAccount.loading,\n        err: state.auth.error,\n        tokenId: state.auth.tokenId,\n        userId: state.auth.userId,\n        investNowApprovalSuccess: state.fundAccount.fundAccountApprovalSuccess,\n        idsOfPendingDeposits: state.fundAccount.idsOfPendingDeposits,\n        pendingDeposit: state.fundAccount.pendingDeposit,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onInitGetFunds: (token) => dispatch(actions.initGetFunds(token)),\n        onInitInvestNowApproval: (id, token) =>\n            dispatch(actions.initInvestNowApproval(id, token)),\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(PendingDeposits)\n"]},"metadata":{},"sourceType":"module"}