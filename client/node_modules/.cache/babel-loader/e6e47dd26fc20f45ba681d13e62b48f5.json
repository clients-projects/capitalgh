{"ast":null,"code":"import _objectSpread from \"/home/niscolinx/projects/fxcrypto/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/niscolinx/projects/fxcrypto/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/niscolinx/projects/fxcrypto/client/src/views/Deposit.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport Select from 'react-select';\nimport { FormGroup, FormControl, Row, Col } from 'react-bootstrap';\nimport { StatsCard } from '../components/StatsCard/StatsCard';\nimport * as orderAction from '../store/actions/burgerIndex';\n\nfunction Deposit(props) {\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        packageProfit = _useState2[0],\n        setPackageProfit = _useState2[1];\n\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        amountToDeposit = _useState4[0],\n        setAmountToDeposit = _useState4[1];\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        packageName = _useState6[0],\n        setPackageName = _useState6[1];\n\n  const _useState7 = useState(0),\n        _useState8 = _slicedToArray(_useState7, 2),\n        userAccountBalance = _useState8[0],\n        setUserAccountBalance = _useState8[1];\n\n  const _useState9 = useState({}),\n        _useState10 = _slicedToArray(_useState9, 2),\n        planDetails = _useState10[0],\n        setPlanDetails = _useState10[1];\n\n  const _useState11 = useState(''),\n        _useState12 = _slicedToArray(_useState11, 2),\n        message = _useState12[0],\n        setMessage = _useState12[1];\n\n  const _useState13 = useState(false),\n        _useState14 = _slicedToArray(_useState13, 2),\n        error = _useState14[0],\n        setError = _useState14[1];\n\n  const _useState15 = useState(''),\n        _useState16 = _slicedToArray(_useState15, 2),\n        adminBitcoinAddress = _useState16[0],\n        setAdminBitcoinAddress = _useState16[1];\n\n  const _useState17 = useState(''),\n        _useState18 = _slicedToArray(_useState17, 2),\n        adminEthereumAddress = _useState18[0],\n        setAdminEthereumAddress = _useState18[1];\n\n  const options = [{\n    label: 'STARTER ($300 - $4,999) - Daily',\n    value: 'STARTER'\n  }, {\n    label: 'AMATEUR ($5000 - $9,999) Daily',\n    value: 'AMATEUR'\n  }, {\n    label: 'PROFESSION ($10,000 - $49,999) - Daily',\n    value: 'PROFESSIONAL'\n  }, {\n    label: 'HELM ($300 - $4,999) - Weekly',\n    value: 'HELM'\n  }, {\n    label: 'PREMIUM ($5000 - $9,999) - Weekly',\n    value: 'PREMIUM'\n  }, {\n    label: 'BUSINESS ($10,000 - $49,999) - Weekly',\n    value: 'BUSINESS'\n  }, {\n    label: 'SILVER ($300 - $4,999) - Monthly',\n    value: 'SILVER'\n  }, {\n    label: 'GOLD ($5000 - $9,999) - Monthly',\n    value: 'GOLD'\n  }, {\n    label: 'DIAMOND ($10,000 - $49,999) - Monthly',\n    value: 'DIAMOND'\n  }];\n  const customStyles = {\n    option: (styles, state) => _objectSpread({}, styles, {\n      cursor: 'pointer'\n    }),\n    control: styles => _objectSpread({}, styles, {\n      cursor: 'pointer'\n    })\n  };\n\n  const onPackageChange = newValue => {\n    let selectedPackage = '';\n\n    if (newValue) {\n      selectedPackage = newValue.value;\n    }\n\n    if (selectedPackage === 'SILVER') {\n      setPackageName('SILVER');\n      setPackageProfit(amountToDeposit * 0.02);\n    }\n\n    if (selectedPackage === 'GOLD') {\n      setPackageName('GOLD');\n      setPackageProfit(amountToDeposit * 0.03);\n    }\n\n    if (selectedPackage === 'DIAMOND') {\n      setPackageName('DIAMOND');\n      setPackageProfit(amountToDeposit * 0.04);\n    }\n\n    if (selectedPackage === 'MASTER') {\n      setPackageName('MASTER');\n      setPackageProfit(amountToDeposit * 0.06);\n    }\n\n    if (selectedPackage === 'DIAMOND') {\n      setPackageName('DIAMOND');\n      setPackageProfit(amountToDeposit * 0.1);\n    }\n  };\n\n  const onAmountChange = e => {\n    let amountValue = e.target.value;\n    amountValue = parseInt(amountValue);\n\n    if (!amountValue) {\n      setMessage('Please enter a value');\n      setError(true);\n      setAmountToDeposit(amountValue);\n    } else {\n      setError(false);\n      setMessage('');\n\n      if (packageName === 'SILVER') {\n        setPackageName('SILVER');\n        setPackageProfit(amountValue * 0.02);\n      }\n\n      if (packageName === 'GOLD') {\n        setPackageName('GOLD');\n        setPackageProfit(amountValue * 0.03);\n      }\n\n      if (packageName === 'DIAMOND') {\n        setPackageName('DIAMOND');\n        setPackageProfit(amountValue * 0.04);\n      }\n\n      if (packageName === 'MASTER') {\n        setPackageName('MASTER');\n        setPackageProfit(amountValue * 0.06);\n      }\n\n      if (packageName === 'DIAMOND') {\n        setPackageName('DIAMOND');\n        setPackageProfit(amountValue * 0.1);\n      }\n\n      setAmountToDeposit(amountValue);\n    }\n  };\n\n  useEffect(() => {\n    switch (packageName) {\n      case 'SILVER':\n        setPlanDetails({\n          name: 'SILVER',\n          percent: 2,\n          hours: 24,\n          minimum: 300,\n          maximum: 4999\n        });\n        break;\n\n      case 'GOLD':\n        setPlanDetails({\n          name: 'GOLD',\n          percent: 3,\n          hours: 24,\n          minimum: 5000,\n          maximum: 9999\n        });\n        break;\n\n      case 'DIAMOND':\n        setPlanDetails({\n          name: 'DIAMOND',\n          percent: 4,\n          hours: 24,\n          minimum: 10000,\n          maximum: 49999\n        });\n        break;\n\n      case 'MASTER':\n        setPlanDetails({\n          name: 'MASTER',\n          percent: 6,\n          hours: 24,\n          minimum: 50000,\n          maximum: 99999\n        });\n        break;\n\n      case 'DIAMOND':\n        setPlanDetails({\n          name: 'DIAMOND',\n          percent: 10,\n          hours: 24,\n          minimum: 100000,\n          maximum: 500000\n        });\n        break;\n\n      case 'DIAMOND':\n        setPlanDetails({\n          name: 'DIAMOND',\n          percent: 10,\n          hours: 24,\n          minimum: 100000,\n          maximum: 500000\n        });\n        break;\n\n      case 'DIAMOND':\n        setPlanDetails({\n          name: 'DIAMOND',\n          percent: 10,\n          hours: 24,\n          minimum: 100000,\n          maximum: 500000\n        });\n        break;\n\n      case 'DIAMOND':\n        setPlanDetails({\n          name: 'DIAMOND',\n          percent: 10,\n          hours: 24,\n          minimum: 100000,\n          maximum: 500000\n        });\n        break;\n\n      case 'DIAMOND':\n        setPlanDetails({\n          name: 'DIAMOND',\n          percent: 10,\n          hours: 24,\n          minimum: 100000,\n          maximum: 500000\n        });\n        break;\n\n      default:\n        setPlanDetails({});\n        break;\n    }\n  }, [packageName]);\n  useEffect(() => {\n    if (props.adminData) {\n      setAdminBitcoinAddress(props.adminData.bitcoinAccount);\n      setAdminEthereumAddress(props.adminData.ethereumAccount);\n    }\n\n    if (props.userData.hasOwnProperty('username')) {\n      setUserAccountBalance(props.userData.accountBalance);\n    }\n  }, [props]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const formData = {\n      packageName,\n      amountToDeposit: Math.floor(amountToDeposit),\n      currency: 'Bitcoin'\n    };\n\n    if (packageName === '') {\n      setMessage('Select a package');\n      return setError(true);\n    }\n\n    if (!amountToDeposit || amountToDeposit === 0) {\n      setMessage('Please enter a value');\n      return setError(true);\n    } else {\n      setError(false);\n      setMessage('');\n\n      if (!error) {\n        props.onInitInvestNow(formData, props.tokenId);\n        props.history.push('/admin/plan-confirmation/:' + packageName, _objectSpread({}, formData, {\n          packageName,\n          planDetails,\n          adminBitcoinAddress,\n          adminEthereumAddress\n        }));\n      }\n    }\n  };\n\n  const displayUserFunds = \"$\".concat(userAccountBalance);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"fundAccount\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    className: \"fundAccount__balance\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    lg: 12,\n    sm: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(StatsCard, {\n    bigIcon: /*#__PURE__*/React.createElement(\"i\", {\n      className: \"pe-7s-server text-warning\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 33\n      }\n    }),\n    statsText: \"Account Balance\",\n    statsValue: displayUserFunds,\n    statsIcon: /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fa fa-refresh\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 40\n      }\n    }),\n    statsIconText: \"Updated now\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"fundAccount__form\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 17\n    }\n  }, message && /*#__PURE__*/React.createElement(\"p\", {\n    className: error ? 'message message__error' : 'message',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 25\n    }\n  }, message), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"label\", {\n    style: {\n      color: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 25\n    }\n  }, \"Package:\"), /*#__PURE__*/React.createElement(Select, {\n    options: options,\n    isClearable: true,\n    styles: customStyles,\n    onChange: onPackageChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"number\",\n    className: \"fundAccount__form--input\",\n    placeholder: \"Enter amount - USD\",\n    name: \"amount\",\n    id: \"amount\",\n    value: amountToDeposit || '',\n    onChange: onAmountChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    style: {\n      textAlign: 'center',\n      margin: '20px',\n      color: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 21\n    }\n  }, \"Total Profit:\", ' ', amountToDeposit ? /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 29\n    }\n  }, \"$\", Math.floor(amountToDeposit + packageProfit)) : ''), /*#__PURE__*/React.createElement(FormGroup, {\n    className: \"fundAccount__form--instruction\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormControl.Static, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 25\n    }\n  }, \"INSTRUCTIONS: Transfer the equivalent amount in bitcoin.\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"fundAccount__form--btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 25\n    }\n  }, props.fundLoading ? 'Loading...' : 'Proceed'))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"fundAccount__form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    className: \"fundAccount__form--contact\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormControl.Static, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 25\n    }\n  }, \"Contact management at support@fxcryptotokeninvestment.com for other payment methods\")))));\n}\n\nconst mapStateToProps = state => {\n  return {\n    err: state.auth.error,\n    loading: state.user.loading,\n    tokenId: state.auth.tokenId,\n    userData: state.auth.userData,\n    userFundAccount: state.auth.userFundAccount,\n    userId: state.auth.userId,\n    totalUserDeposits: state.auth.totalUserDeposits,\n    totalUserWithdrawals: state.auth.totalUserWithdrawals,\n    fundAccountCount: state.auth.fundAccountCount,\n    adminData: state.user.adminData\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    //onInitGetUser: (token) => dispatch(actionTypes.initGetUser(token)),\n    onInitInvestNow: (data, token) => dispatch(orderAction.initInvestNow(data, token))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Deposit);","map":{"version":3,"sources":["/home/niscolinx/projects/fxcrypto/client/src/views/Deposit.jsx"],"names":["React","useState","useEffect","connect","Select","FormGroup","FormControl","Row","Col","StatsCard","orderAction","Deposit","props","packageProfit","setPackageProfit","amountToDeposit","setAmountToDeposit","packageName","setPackageName","userAccountBalance","setUserAccountBalance","planDetails","setPlanDetails","message","setMessage","error","setError","adminBitcoinAddress","setAdminBitcoinAddress","adminEthereumAddress","setAdminEthereumAddress","options","label","value","customStyles","option","styles","state","cursor","control","onPackageChange","newValue","selectedPackage","onAmountChange","e","amountValue","target","parseInt","name","percent","hours","minimum","maximum","adminData","bitcoinAccount","ethereumAccount","userData","hasOwnProperty","accountBalance","handleSubmit","preventDefault","formData","Math","floor","currency","onInitInvestNow","tokenId","history","push","displayUserFunds","color","textAlign","margin","fundLoading","mapStateToProps","err","auth","loading","user","userFundAccount","userId","totalUserDeposits","totalUserWithdrawals","fundAccountCount","mapDispatchToProps","dispatch","data","token","initInvestNow"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport Select from 'react-select'\nimport { FormGroup, FormControl, Row, Col } from 'react-bootstrap'\nimport { StatsCard } from '../components/StatsCard/StatsCard'\n\nimport * as orderAction from '../store/actions/burgerIndex'\n\nfunction Deposit(props) {\n    const [packageProfit, setPackageProfit] = useState(0)\n    const [amountToDeposit, setAmountToDeposit] = useState()\n    const [packageName, setPackageName] = useState('')\n    const [userAccountBalance, setUserAccountBalance] = useState(0)\n\n    const [planDetails, setPlanDetails] = useState({})\n    const [message, setMessage] = useState('')\n    const [error, setError] = useState(false)\n    const [adminBitcoinAddress, setAdminBitcoinAddress] = useState('')\n    const [adminEthereumAddress, setAdminEthereumAddress] = useState('')\n\n    const options = [\n        { label: 'STARTER ($300 - $4,999) - Daily', value: 'STARTER' },\n        { label: 'AMATEUR ($5000 - $9,999) Daily', value: 'AMATEUR' },\n        {\n            label: 'PROFESSION ($10,000 - $49,999) - Daily',\n            value: 'PROFESSIONAL',\n        },\n\n        { label: 'HELM ($300 - $4,999) - Weekly', value: 'HELM' },\n        { label: 'PREMIUM ($5000 - $9,999) - Weekly', value: 'PREMIUM' },\n        { label: 'BUSINESS ($10,000 - $49,999) - Weekly', value: 'BUSINESS' },\n\n        { label: 'SILVER ($300 - $4,999) - Monthly', value: 'SILVER' },\n        { label: 'GOLD ($5000 - $9,999) - Monthly', value: 'GOLD' },\n        { label: 'DIAMOND ($10,000 - $49,999) - Monthly', value: 'DIAMOND' },\n    ]\n\n    const customStyles = {\n        option: (styles, state) => ({\n            ...styles,\n            cursor: 'pointer',\n        }),\n        control: (styles) => ({\n            ...styles,\n            cursor: 'pointer',\n        }),\n    }\n\n    const onPackageChange = (newValue) => {\n        let selectedPackage = ''\n        if (newValue) {\n            selectedPackage = newValue.value\n        }\n\n        if (selectedPackage === 'SILVER') {\n            setPackageName('SILVER')\n            setPackageProfit(amountToDeposit * 0.02)\n        }\n        if (selectedPackage === 'GOLD') {\n            setPackageName('GOLD')\n\n            setPackageProfit(amountToDeposit * 0.03)\n        }\n        if (selectedPackage === 'DIAMOND') {\n            setPackageName('DIAMOND')\n\n            setPackageProfit(amountToDeposit * 0.04)\n        }\n        if (selectedPackage === 'MASTER') {\n            setPackageName('MASTER')\n\n            setPackageProfit(amountToDeposit * 0.06)\n        }\n        if (selectedPackage === 'DIAMOND') {\n            setPackageName('DIAMOND')\n\n            setPackageProfit(amountToDeposit * 0.1)\n        }\n    }\n\n    const onAmountChange = (e) => {\n        let amountValue = e.target.value\n        amountValue = parseInt(amountValue)\n\n        if (!amountValue) {\n            setMessage('Please enter a value')\n            setError(true)\n            setAmountToDeposit(amountValue)\n        } else {\n            setError(false)\n            setMessage('')\n\n            if (packageName === 'SILVER') {\n                setPackageName('SILVER')\n                setPackageProfit(amountValue * 0.02)\n            }\n            if (packageName === 'GOLD') {\n                setPackageName('GOLD')\n\n                setPackageProfit(amountValue * 0.03)\n            }\n            if (packageName === 'DIAMOND') {\n                setPackageName('DIAMOND')\n\n                setPackageProfit(amountValue * 0.04)\n            }\n            if (packageName === 'MASTER') {\n                setPackageName('MASTER')\n\n                setPackageProfit(amountValue * 0.06)\n            }\n            if (packageName === 'DIAMOND') {\n                setPackageName('DIAMOND')\n\n                setPackageProfit(amountValue * 0.1)\n            }\n\n            setAmountToDeposit(amountValue)\n        }\n    }\n\n    useEffect(() => {\n        switch (packageName) {\n            case 'SILVER':\n                setPlanDetails({\n                    name: 'SILVER',\n                    percent: 2,\n                    hours: 24,\n                    minimum: 300,\n                    maximum: 4999,\n                })\n                break\n            case 'GOLD':\n                setPlanDetails({\n                    name: 'GOLD',\n                    percent: 3,\n                    hours: 24,\n                    minimum: 5000,\n                    maximum: 9999,\n                })\n                break\n            case 'DIAMOND':\n                setPlanDetails({\n                    name: 'DIAMOND',\n                    percent: 4,\n                    hours: 24,\n                    minimum: 10000,\n                    maximum: 49999,\n                })\n                break\n            case 'MASTER':\n                setPlanDetails({\n                    name: 'MASTER',\n                    percent: 6,\n                    hours: 24,\n                    minimum: 50000,\n                    maximum: 99999,\n                })\n                break\n            case 'DIAMOND':\n                setPlanDetails({\n                    name: 'DIAMOND',\n                    percent: 10,\n                    hours: 24,\n                    minimum: 100000,\n                    maximum: 500000,\n                })\n                break\n            case 'DIAMOND':\n                setPlanDetails({\n                    name: 'DIAMOND',\n                    percent: 10,\n                    hours: 24,\n                    minimum: 100000,\n                    maximum: 500000,\n                })\n                break\n            case 'DIAMOND':\n                setPlanDetails({\n                    name: 'DIAMOND',\n                    percent: 10,\n                    hours: 24,\n                    minimum: 100000,\n                    maximum: 500000,\n                })\n                break\n            case 'DIAMOND':\n                setPlanDetails({\n                    name: 'DIAMOND',\n                    percent: 10,\n                    hours: 24,\n                    minimum: 100000,\n                    maximum: 500000,\n                })\n                break\n            case 'DIAMOND':\n                setPlanDetails({\n                    name: 'DIAMOND',\n                    percent: 10,\n                    hours: 24,\n                    minimum: 100000,\n                    maximum: 500000,\n                })\n                break\n\n            default:\n                setPlanDetails({})\n                break\n        }\n    }, [packageName])\n\n    useEffect(() => {\n        if (props.adminData) {\n            setAdminBitcoinAddress(props.adminData.bitcoinAccount)\n            setAdminEthereumAddress(props.adminData.ethereumAccount)\n        }\n        if (props.userData.hasOwnProperty('username')) {\n            setUserAccountBalance(props.userData.accountBalance)\n        }\n    }, [props])\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        const formData = {\n            packageName,\n            amountToDeposit: Math.floor(amountToDeposit),\n            currency: 'Bitcoin',\n        }\n\n        if (packageName === '') {\n            setMessage('Select a package')\n            return setError(true)\n        }\n        if (!amountToDeposit || amountToDeposit === 0) {\n            setMessage('Please enter a value')\n            return setError(true)\n        } else {\n            setError(false)\n            setMessage('')\n\n            if (!error) {\n                props.onInitInvestNow(formData, props.tokenId)\n\n                props.history.push('/admin/plan-confirmation/:' + packageName, {\n                    ...formData,\n                    packageName,\n                    planDetails,\n                    adminBitcoinAddress,\n                    adminEthereumAddress,\n                })\n            }\n        }\n    }\n\n    const displayUserFunds = `$${userAccountBalance}`\n\n    return (\n        <>\n            <div className='fundAccount'>\n                <Row className='fundAccount__balance'>\n                    <Col lg={12} sm={12}>\n                        <StatsCard\n                            bigIcon={\n                                <i className='pe-7s-server text-warning' />\n                            }\n                            statsText='Account Balance'\n                            statsValue={displayUserFunds}\n                            statsIcon={<i className='fa fa-refresh' />}\n                            statsIconText='Updated now'\n                        />\n                    </Col>\n                </Row>\n                <form className='fundAccount__form' onSubmit={handleSubmit}>\n                    {message && (\n                        <p\n                            className={\n                                error ? 'message message__error' : 'message'\n                            }\n                        >\n                            {message}\n                        </p>\n                    )}\n                    <>\n                        <label style={{ color: 'white' }}>Package:</label>\n                        <Select\n                            options={options}\n                            isClearable\n                            styles={customStyles}\n                            onChange={onPackageChange}\n                        />\n                    </>\n                    <input\n                        type='number'\n                        className='fundAccount__form--input'\n                        placeholder='Enter amount - USD'\n                        name='amount'\n                        id='amount'\n                        value={amountToDeposit || ''}\n                        onChange={onAmountChange}\n                    />\n\n                    <h2\n                        style={{\n                            textAlign: 'center',\n                            margin: '20px',\n                            color: 'white',\n                        }}\n                    >\n                        Total Profit:{' '}\n                        {amountToDeposit ? (\n                            <strong>\n                                ${Math.floor(amountToDeposit + packageProfit)}\n                            </strong>\n                        ) : (\n                            ''\n                        )}\n                    </h2>\n\n                    <FormGroup className='fundAccount__form--instruction'>\n                        <FormControl.Static>\n                            INSTRUCTIONS: Transfer the equivalent amount in\n                            bitcoin.\n                        </FormControl.Static>\n                    </FormGroup>\n\n                    <div className='fundAccount__form--btn'>\n                        <button type='submit' className='button'>\n                            {props.fundLoading ? 'Loading...' : 'Proceed'}\n                        </button>\n                    </div>\n                </form>\n\n                <div className='fundAccount__form'>\n                    <FormGroup className='fundAccount__form--contact'>\n                        <FormControl.Static>\n                            Contact management at\n                            support@fxcryptotokeninvestment.com for other\n                            payment methods\n                        </FormControl.Static>\n                    </FormGroup>\n                </div>\n            </div>\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        err: state.auth.error,\n        loading: state.user.loading,\n        tokenId: state.auth.tokenId,\n        userData: state.auth.userData,\n        userFundAccount: state.auth.userFundAccount,\n        userId: state.auth.userId,\n        totalUserDeposits: state.auth.totalUserDeposits,\n        totalUserWithdrawals: state.auth.totalUserWithdrawals,\n        fundAccountCount: state.auth.fundAccountCount,\n        adminData: state.user.adminData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        //onInitGetUser: (token) => dispatch(actionTypes.initGetUser(token)),\n        onInitInvestNow: (data, token) =>\n            dispatch(orderAction.initInvestNow(data, token)),\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Deposit)\n"]},"metadata":{},"sourceType":"module"}