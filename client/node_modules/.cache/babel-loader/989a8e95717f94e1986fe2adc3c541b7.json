{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/niscolinx/projects/fxcryptotokeninvestment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"/home/niscolinx/projects/fxcryptotokeninvestment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/niscolinx/projects/fxcryptotokeninvestment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Canvas = void 0;\n\nvar Utils_1 = require(\"../Utils\");\n\nvar Utils_2 = require(\"../Utils\");\n\nvar Canvas = /*#__PURE__*/function () {\n  function Canvas(container) {\n    _classCallCheck(this, Canvas);\n\n    this.container = container;\n    this.size = {\n      height: 0,\n      width: 0\n    };\n    this.context = null;\n    this.generatedCanvas = false;\n  }\n\n  _createClass(Canvas, [{\n    key: \"init\",\n    value: function init() {\n      this.resize();\n      this.initStyle();\n      this.initCover();\n      this.initTrail();\n      this.initBackground();\n      this.paint();\n    }\n  }, {\n    key: \"loadCanvas\",\n    value: function loadCanvas(canvas, generatedCanvas) {\n      var _a;\n\n      if (!canvas.className) {\n        canvas.className = Utils_1.Constants.canvasClass;\n      }\n\n      if (this.generatedCanvas) {\n        (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n      }\n\n      this.generatedCanvas = generatedCanvas !== null && generatedCanvas !== void 0 ? generatedCanvas : this.generatedCanvas;\n      this.element = canvas;\n      this.originalStyle = (0, Utils_1.deepExtend)({}, this.element.style);\n      this.size.height = canvas.offsetHeight;\n      this.size.width = canvas.offsetWidth;\n      this.context = this.element.getContext(\"2d\");\n      this.container.retina.init();\n      this.initBackground();\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _this = this;\n\n      var _a;\n\n      if (this.generatedCanvas) {\n        (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n      }\n\n      this.draw(function (ctx) {\n        (0, Utils_2.clear)(ctx, _this.size);\n      });\n    }\n  }, {\n    key: \"paint\",\n    value: function paint() {\n      var _this2 = this;\n\n      var options = this.container.actualOptions;\n      this.draw(function (ctx) {\n        if (options.backgroundMask.enable && options.backgroundMask.cover && _this2.coverColor) {\n          (0, Utils_2.clear)(ctx, _this2.size);\n\n          _this2.paintBase((0, Utils_1.getStyleFromRgb)(_this2.coverColor, _this2.coverColor.a));\n        } else {\n          _this2.paintBase();\n        }\n      });\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var _this3 = this;\n\n      var options = this.container.actualOptions;\n      var trail = options.particles.move.trail;\n\n      if (options.backgroundMask.enable) {\n        this.paint();\n      } else if (trail.enable && trail.length > 0 && this.trailFillColor) {\n        this.paintBase((0, Utils_1.getStyleFromRgb)(this.trailFillColor, 1 / trail.length));\n      } else {\n        this.draw(function (ctx) {\n          (0, Utils_2.clear)(ctx, _this3.size);\n        });\n      }\n    }\n  }, {\n    key: \"windowResize\",\n    value: function windowResize() {\n      if (!this.element) {\n        return;\n      }\n\n      var container = this.container;\n      this.resize();\n      var needsRefresh = container.updateActualOptions();\n      container.particles.setDensity();\n\n      var _iterator = _createForOfIteratorHelper(container.plugins),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              plugin = _step$value[1];\n\n          if (plugin.resize !== undefined) {\n            plugin.resize();\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (needsRefresh) {\n        container.refresh();\n      }\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      if (!this.element) {\n        return;\n      }\n\n      var container = this.container;\n      var pxRatio = container.retina.pixelRatio;\n      var size = container.canvas.size;\n      var oldSize = {\n        width: size.width,\n        height: size.height\n      };\n      size.width = this.element.offsetWidth * pxRatio;\n      size.height = this.element.offsetHeight * pxRatio;\n      this.element.width = size.width;\n      this.element.height = size.height;\n\n      if (this.container.started) {\n        this.resizeFactor = {\n          width: size.width / oldSize.width,\n          height: size.height / oldSize.height\n        };\n      }\n    }\n  }, {\n    key: \"drawConnectLine\",\n    value: function drawConnectLine(p1, p2) {\n      var _this4 = this;\n\n      this.draw(function (ctx) {\n        var _a;\n\n        var lineStyle = _this4.lineStyle(p1, p2);\n\n        if (!lineStyle) {\n          return;\n        }\n\n        var pos1 = p1.getPosition();\n        var pos2 = p2.getPosition();\n        (0, Utils_1.drawConnectLine)(ctx, (_a = p1.retina.linksWidth) !== null && _a !== void 0 ? _a : _this4.container.retina.linksWidth, lineStyle, pos1, pos2);\n      });\n    }\n  }, {\n    key: \"drawGrabLine\",\n    value: function drawGrabLine(particle, lineColor, opacity, mousePos) {\n      var container = this.container;\n      this.draw(function (ctx) {\n        var _a;\n\n        var beginPos = particle.getPosition();\n        (0, Utils_1.drawGrabLine)(ctx, (_a = particle.retina.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth, beginPos, mousePos, lineColor, opacity);\n      });\n    }\n  }, {\n    key: \"drawParticle\",\n    value: function drawParticle(particle, delta) {\n      var _this5 = this;\n\n      var _a, _b, _c, _d, _e, _f;\n\n      if (particle.spawning || particle.destroyed) {\n        return;\n      }\n\n      var pfColor = particle.getFillColor();\n      var psColor = (_a = particle.getStrokeColor()) !== null && _a !== void 0 ? _a : pfColor;\n\n      if (!pfColor && !psColor) {\n        return;\n      }\n\n      var _this$getPluginPartic = this.getPluginParticleColors(particle),\n          _this$getPluginPartic2 = _slicedToArray(_this$getPluginPartic, 2),\n          fColor = _this$getPluginPartic2[0],\n          sColor = _this$getPluginPartic2[1];\n\n      var pOptions = particle.options;\n      var twinkle = pOptions.twinkle.particles;\n      var twinkling = twinkle.enable && Math.random() < twinkle.frequency;\n\n      if (!fColor || !sColor) {\n        var twinkleRgb = (0, Utils_1.colorToHsl)(twinkle.color);\n\n        if (!fColor) {\n          fColor = twinkling && twinkleRgb !== undefined ? twinkleRgb : pfColor ? pfColor : undefined;\n        }\n\n        if (!sColor) {\n          sColor = twinkling && twinkleRgb !== undefined ? twinkleRgb : psColor ? psColor : undefined;\n        }\n      }\n\n      var options = this.container.actualOptions;\n      var zIndexOptions = particle.options.zIndex;\n      var zOpacityFactor = Math.pow(1 - particle.zIndexFactor, zIndexOptions.opacityRate);\n      var radius = particle.getRadius();\n      var opacity = twinkling ? twinkle.opacity : (_d = (_b = particle.bubble.opacity) !== null && _b !== void 0 ? _b : (_c = particle.opacity) === null || _c === void 0 ? void 0 : _c.value) !== null && _d !== void 0 ? _d : 1;\n      var strokeOpacity = (_f = (_e = particle.stroke) === null || _e === void 0 ? void 0 : _e.opacity) !== null && _f !== void 0 ? _f : opacity;\n      var zOpacity = opacity * zOpacityFactor;\n      var fillColorValue = fColor ? (0, Utils_1.getStyleFromHsl)(fColor, zOpacity) : undefined;\n\n      if (!fillColorValue && !sColor) {\n        return;\n      }\n\n      this.draw(function (ctx) {\n        var zSizeFactor = Math.pow(1 - particle.zIndexFactor, zIndexOptions.sizeRate);\n        var zStrokeOpacity = strokeOpacity * zOpacityFactor;\n        var strokeColorValue = sColor ? (0, Utils_1.getStyleFromHsl)(sColor, zStrokeOpacity) : fillColorValue;\n\n        if (radius <= 0) {\n          return;\n        }\n\n        var container = _this5.container;\n\n        var _iterator2 = _createForOfIteratorHelper(container.particles.updaters),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var updater = _step2.value;\n\n            if (updater.beforeDraw) {\n              updater.beforeDraw(particle);\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        (0, Utils_1.drawParticle)(_this5.container, ctx, particle, delta, fillColorValue, strokeColorValue, options.backgroundMask.enable, options.backgroundMask.composite, radius * zSizeFactor, zOpacity, particle.options.shadow, particle.gradient);\n\n        var _iterator3 = _createForOfIteratorHelper(container.particles.updaters),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var _updater = _step3.value;\n\n            if (_updater.afterDraw) {\n              _updater.afterDraw(particle);\n            }\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      });\n    }\n  }, {\n    key: \"drawPlugin\",\n    value: function drawPlugin(plugin, delta) {\n      this.draw(function (ctx) {\n        (0, Utils_1.drawPlugin)(ctx, plugin, delta);\n      });\n    }\n  }, {\n    key: \"drawParticlePlugin\",\n    value: function drawParticlePlugin(plugin, particle, delta) {\n      this.draw(function (ctx) {\n        (0, Utils_1.drawParticlePlugin)(ctx, plugin, particle, delta);\n      });\n    }\n  }, {\n    key: \"initBackground\",\n    value: function initBackground() {\n      var options = this.container.actualOptions;\n      var background = options.background;\n      var element = this.element;\n      var elementStyle = element === null || element === void 0 ? void 0 : element.style;\n\n      if (!elementStyle) {\n        return;\n      }\n\n      if (background.color) {\n        var color = (0, Utils_1.colorToRgb)(background.color);\n        elementStyle.backgroundColor = color ? (0, Utils_1.getStyleFromRgb)(color, background.opacity) : \"\";\n      } else {\n        elementStyle.backgroundColor = \"\";\n      }\n\n      elementStyle.backgroundImage = background.image || \"\";\n      elementStyle.backgroundPosition = background.position || \"\";\n      elementStyle.backgroundRepeat = background.repeat || \"\";\n      elementStyle.backgroundSize = background.size || \"\";\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(cb) {\n      if (!this.context) {\n        return;\n      }\n\n      return cb(this.context);\n    }\n  }, {\n    key: \"initCover\",\n    value: function initCover() {\n      var options = this.container.actualOptions;\n      var cover = options.backgroundMask.cover;\n      var color = cover.color;\n      var coverRgb = (0, Utils_1.colorToRgb)(color);\n\n      if (coverRgb) {\n        this.coverColor = {\n          r: coverRgb.r,\n          g: coverRgb.g,\n          b: coverRgb.b,\n          a: cover.opacity\n        };\n      }\n    }\n  }, {\n    key: \"initTrail\",\n    value: function initTrail() {\n      var options = this.container.actualOptions;\n      var trail = options.particles.move.trail;\n      var fillColor = (0, Utils_1.colorToRgb)(trail.fillColor);\n\n      if (fillColor) {\n        var _trail = options.particles.move.trail;\n        this.trailFillColor = {\n          r: fillColor.r,\n          g: fillColor.g,\n          b: fillColor.b,\n          a: 1 / _trail.length\n        };\n      }\n    }\n  }, {\n    key: \"getPluginParticleColors\",\n    value: function getPluginParticleColors(particle) {\n      var fColor;\n      var sColor;\n\n      var _iterator4 = _createForOfIteratorHelper(this.container.plugins),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _step4$value = _slicedToArray(_step4.value, 2),\n              plugin = _step4$value[1];\n\n          if (!fColor && plugin.particleFillColor) {\n            fColor = (0, Utils_1.colorToHsl)(plugin.particleFillColor(particle));\n          }\n\n          if (!sColor && plugin.particleStrokeColor) {\n            sColor = (0, Utils_1.colorToHsl)(plugin.particleStrokeColor(particle));\n          }\n\n          if (fColor && sColor) {\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      return [fColor, sColor];\n    }\n  }, {\n    key: \"initStyle\",\n    value: function initStyle() {\n      var element = this.element,\n          options = this.container.actualOptions;\n\n      if (!element) {\n        return;\n      }\n\n      var originalStyle = this.originalStyle;\n\n      if (options.fullScreen.enable) {\n        this.originalStyle = (0, Utils_1.deepExtend)({}, element.style);\n        element.style.position = \"fixed\";\n        element.style.zIndex = options.fullScreen.zIndex.toString(10);\n        element.style.top = \"0\";\n        element.style.left = \"0\";\n        element.style.width = \"100%\";\n        element.style.height = \"100%\";\n      } else if (originalStyle) {\n        element.style.position = originalStyle.position;\n        element.style.zIndex = originalStyle.zIndex;\n        element.style.top = originalStyle.top;\n        element.style.left = originalStyle.left;\n        element.style.width = originalStyle.width;\n        element.style.height = originalStyle.height;\n      }\n    }\n  }, {\n    key: \"paintBase\",\n    value: function paintBase(baseColor) {\n      var _this6 = this;\n\n      this.draw(function (ctx) {\n        (0, Utils_1.paintBase)(ctx, _this6.size, baseColor);\n      });\n    }\n  }, {\n    key: \"lineStyle\",\n    value: function lineStyle(p1, p2) {\n      var _this7 = this;\n\n      return this.draw(function (ctx) {\n        var options = _this7.container.actualOptions;\n        var connectOptions = options.interactivity.modes.connect;\n        return (0, Utils_1.gradient)(ctx, p1, p2, connectOptions.links.opacity);\n      });\n    }\n  }]);\n\n  return Canvas;\n}();\n\nexports.Canvas = Canvas;","map":null,"metadata":{},"sourceType":"script"}