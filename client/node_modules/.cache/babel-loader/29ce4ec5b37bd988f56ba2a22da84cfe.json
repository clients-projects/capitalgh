{"ast":null,"code":"import * as actions from './actionTypes'; //const URL = 'http://localhost:3030'\n\nconst URL = 'https://fxcrypto.herokuapp.com'; //const URL =  'http://robot44-env.eba-imcy7pye.us-east-1.elasticbeanstalk.com/api/graphql'\n\nexport const fundAccountStart = () => {\n  return {\n    type: actions.FUND_ACCOUNT_START\n  };\n};\nexport const fundAccountSuccess = data => {\n  return {\n    type: actions.FUND_ACCOUNT_SUCCESS,\n    data\n  };\n};\nexport const getFundAccountSuccess = data => {\n  return {\n    type: actions.GET_FUND_ACCOUNT_SUCCESS,\n    data\n  };\n};\nexport const fundAccountFailed = err => {\n  return {\n    type: actions.FUND_ACCOUNT_FAILED,\n    err\n  };\n};\nexport const fundAccountApprovalSuccess = data => {\n  return {\n    type: actions.FUND_ACCOUNT_APPROVAL_SUCCESS,\n    data\n  };\n};\nexport const initFundAccount = (fundData, token) => {\n  return dispatch => {\n    dispatch(fundAccountStart()); // const formData = new FormData()\n    // if(fundData.file){\n    //     console.log('the file')\n    //     formData.append('image', fundData.file['0'])\n    // }\n    // fetch(URL + '/api/post-image', {\n    //     method: 'PUT',\n    //     headers: {\n    //         Authorization: 'Bearer ' + token,\n    //     },\n    //     body: formData,\n    // })\n    //     .then((res) => {\n    //         return res.json()\n    //     })\n    //     .then((result) => {\n    //         const proofUrl = result.filePath\n\n    let graphqlQuery = {\n      query: \"\\n                mutation { createFundAccount(fundData: {\\n                        amount: \\\"\".concat(fundData.amount, \"\\\",\\n                        currency: \\\"\").concat(fundData.currency, \"\\\",\\n                    }){\\n                        _id\\n                        amount\\n                        currency\\n                        creator {\\n                            username\\n                        }\\n                        createdAt\\n                    }\\n                }\\n            \")\n    };\n    return fetch(URL + '/api/graphql', {\n      method: 'POST',\n      body: JSON.stringify(graphqlQuery),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    }).then(res => {\n      return res.json();\n    }).then(resData => {\n      if (resData.errors) {\n        dispatch(fundAccountFailed(resData.errors[0].message));\n      }\n\n      dispatch(getFundAccountSuccess(resData.data));\n    }).catch(err => {\n      console.log(err);\n      dispatch(fundAccountFailed(err));\n    });\n  };\n};\nexport const initGetFunds = token => {\n  return dispatch => {\n    dispatch(fundAccountStart());\n    let graphqlQuery = {\n      query: \"{\\n                getFunds {\\n                    getPendingDeposit {\\n                        _id\\n                    }\\n                    getPendingWithdrawal {\\n                        _id\\n                    }\\n\\n                    getFund {\\n                        _id\\n                    }\\n\\n                    getAllUsersDeposit {\\n                        _id\\n                    }\\n\\n                    getAllUsersWithdrawal {\\n                        _id\\n                    }\\n\\n                    fundData {\\n                        fundNO\\n                        creator\\n                        amount\\n                        currency\\n                        status\\n                        updatedAt\\n                    }\\n\\n                    thePendingDeposit {\\n                        fundNO\\n                        creator\\n                        amount\\n                        planName\\n                        status\\n                        updatedAt\\n                    }\\n\\n                    thePendingWithdrawal {\\n                        fundNO\\n                        creator\\n                        amount\\n                        currency\\n                        status\\n                        updatedAt\\n                    }\\n\\n                    theAllUsersDeposit {\\n                        fundNO\\n                        creator\\n                        amount\\n                        planName\\n                        updatedAt\\n                    }\\n\\n                    theAllUsersWithdrawal{\\n                        fundNO\\n                        creator\\n                        amount\\n                        currency\\n                        updatedAt\\n                    }\\n\\n                }\\n            }\"\n    };\n    return fetch(URL + '/api/graphql', {\n      method: 'POST',\n      body: JSON.stringify(graphqlQuery),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    }).then(res => {\n      return res.json();\n    }).then(resData => {\n      if (resData.errors) {\n        dispatch(fundAccountFailed(resData.errors[0].message));\n      }\n\n      dispatch(fundAccountSuccess(resData.data.getFunds));\n    }).catch(err => {\n      console.log(err);\n      dispatch(fundAccountFailed(err));\n    });\n  };\n};\nexport const initFundApproval = (id, token) => {\n  return dispatch => {\n    dispatch(fundAccountStart());\n    let graphqlQuery = {\n      query: \"\\n                mutation { createFundAccountApproval(PostId: {\\n                    id: \\\"\".concat(id, \"\\\"\\n                }){\\n                        _id\\n                        amount\\n                        currency\\n                        creator {\\n                            username\\n                        }\\n                        createdAt\\n                    }\\n                }\\n            \")\n    };\n    return fetch(URL + '/api/graphql', {\n      method: 'POST',\n      body: JSON.stringify(graphqlQuery),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    }).then(res => {\n      return res.json();\n    }).then(resData => {\n      if (resData.errors) {\n        dispatch(fundAccountFailed(resData.errors[0].message));\n      }\n\n      dispatch(fundAccountApprovalSuccess(resData.data.createFundAccountApproval));\n    }).catch(err => {\n      console.log(err);\n      dispatch(fundAccountFailed(err));\n    });\n  };\n};","map":{"version":3,"sources":["/home/niscolinx/projects/fxcrypto/client/src/store/actions/FundAccount.js"],"names":["actions","URL","fundAccountStart","type","FUND_ACCOUNT_START","fundAccountSuccess","data","FUND_ACCOUNT_SUCCESS","getFundAccountSuccess","GET_FUND_ACCOUNT_SUCCESS","fundAccountFailed","err","FUND_ACCOUNT_FAILED","fundAccountApprovalSuccess","FUND_ACCOUNT_APPROVAL_SUCCESS","initFundAccount","fundData","token","dispatch","graphqlQuery","query","amount","currency","fetch","method","body","JSON","stringify","headers","Authorization","then","res","json","resData","errors","message","catch","console","log","initGetFunds","getFunds","initFundApproval","id","createFundAccountApproval"],"mappings":"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","sourcesContent":["import * as actions from './actionTypes'\r\n\r\n//const URL = 'http://localhost:3030'\r\n\r\nconst URL = 'https://fxcrypto.herokuapp.com'\r\n\r\n//const URL =  'http://robot44-env.eba-imcy7pye.us-east-1.elasticbeanstalk.com/api/graphql'\r\n\r\nexport const fundAccountStart = () => {\r\n    return {\r\n        type: actions.FUND_ACCOUNT_START,\r\n    }\r\n}\r\nexport const fundAccountSuccess = (data) => {\r\n    return {\r\n        type: actions.FUND_ACCOUNT_SUCCESS,\r\n        data,\r\n    }\r\n}\r\nexport const getFundAccountSuccess = (data) => {\r\n    return {\r\n        type: actions.GET_FUND_ACCOUNT_SUCCESS,\r\n        data,\r\n    }\r\n}\r\nexport const fundAccountFailed = (err) => {\r\n    return {\r\n        type: actions.FUND_ACCOUNT_FAILED,\r\n        err,\r\n    }\r\n}\r\nexport const fundAccountApprovalSuccess = (data) => {\r\n    return {\r\n        type: actions.FUND_ACCOUNT_APPROVAL_SUCCESS,\r\n        data,\r\n    }\r\n}\r\n\r\nexport const initFundAccount = (fundData, token) => {\r\n    return (dispatch) => {\r\n        dispatch(fundAccountStart())\r\n        // const formData = new FormData()\r\n        // if(fundData.file){\r\n        //     console.log('the file')\r\n        //     formData.append('image', fundData.file['0'])\r\n        // }\r\n\r\n        // fetch(URL + '/api/post-image', {\r\n        //     method: 'PUT',\r\n        //     headers: {\r\n        //         Authorization: 'Bearer ' + token,\r\n        //     },\r\n        //     body: formData,\r\n        // })\r\n        //     .then((res) => {\r\n        //         return res.json()\r\n        //     })\r\n        //     .then((result) => {\r\n        //         const proofUrl = result.filePath\r\n\r\n        let graphqlQuery = {\r\n            query: `\r\n                mutation { createFundAccount(fundData: {\r\n                        amount: \"${fundData.amount}\",\r\n                        currency: \"${fundData.currency}\",\r\n                    }){\r\n                        _id\r\n                        amount\r\n                        currency\r\n                        creator {\r\n                            username\r\n                        }\r\n                        createdAt\r\n                    }\r\n                }\r\n            `,\r\n        }\r\n\r\n        return fetch(URL + '/api/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(graphqlQuery),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: 'Bearer ' + token,\r\n            },\r\n        })\r\n            .then((res) => {\r\n                return res.json()\r\n            })\r\n            .then((resData) => {\r\n                if (resData.errors) {\r\n                    dispatch(fundAccountFailed(resData.errors[0].message))\r\n                }\r\n\r\n                dispatch(getFundAccountSuccess(resData.data))\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n                dispatch(fundAccountFailed(err))\r\n            })\r\n    }\r\n}\r\nexport const initGetFunds = (token) => {\r\n    return (dispatch) => {\r\n        dispatch(fundAccountStart())\r\n\r\n        let graphqlQuery = {\r\n            query: `{\r\n                getFunds {\r\n                    getPendingDeposit {\r\n                        _id\r\n                    }\r\n                    getPendingWithdrawal {\r\n                        _id\r\n                    }\r\n\r\n                    getFund {\r\n                        _id\r\n                    }\r\n\r\n                    getAllUsersDeposit {\r\n                        _id\r\n                    }\r\n\r\n                    getAllUsersWithdrawal {\r\n                        _id\r\n                    }\r\n\r\n                    fundData {\r\n                        fundNO\r\n                        creator\r\n                        amount\r\n                        currency\r\n                        status\r\n                        updatedAt\r\n                    }\r\n\r\n                    thePendingDeposit {\r\n                        fundNO\r\n                        creator\r\n                        amount\r\n                        planName\r\n                        status\r\n                        updatedAt\r\n                    }\r\n\r\n                    thePendingWithdrawal {\r\n                        fundNO\r\n                        creator\r\n                        amount\r\n                        currency\r\n                        status\r\n                        updatedAt\r\n                    }\r\n\r\n                    theAllUsersDeposit {\r\n                        fundNO\r\n                        creator\r\n                        amount\r\n                        planName\r\n                        updatedAt\r\n                    }\r\n\r\n                    theAllUsersWithdrawal{\r\n                        fundNO\r\n                        creator\r\n                        amount\r\n                        currency\r\n                        updatedAt\r\n                    }\r\n\r\n                }\r\n            }`,\r\n        }\r\n\r\n        return fetch(URL + '/api/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(graphqlQuery),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: 'Bearer ' + token,\r\n            },\r\n        })\r\n            .then((res) => {\r\n                return res.json()\r\n            })\r\n            .then((resData) => {\r\n                if (resData.errors) {\r\n                    dispatch(fundAccountFailed(resData.errors[0].message))\r\n                }\r\n\r\n                dispatch(fundAccountSuccess(resData.data.getFunds))\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n                dispatch(fundAccountFailed(err))\r\n            })\r\n    }\r\n}\r\nexport const initFundApproval = (id, token) => {\r\n    return (dispatch) => {\r\n        dispatch(fundAccountStart())\r\n\r\n        let graphqlQuery = {\r\n            query: `\r\n                mutation { createFundAccountApproval(PostId: {\r\n                    id: \"${id}\"\r\n                }){\r\n                        _id\r\n                        amount\r\n                        currency\r\n                        creator {\r\n                            username\r\n                        }\r\n                        createdAt\r\n                    }\r\n                }\r\n            `,\r\n        }\r\n\r\n        return fetch(URL + '/api/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(graphqlQuery),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: 'Bearer ' + token,\r\n            },\r\n        })\r\n            .then((res) => {\r\n                return res.json()\r\n            })\r\n            .then((resData) => {\r\n                if (resData.errors) {\r\n                    dispatch(fundAccountFailed(resData.errors[0].message))\r\n                }\r\n\r\n                dispatch(\r\n                    fundAccountApprovalSuccess(\r\n                        resData.data.createFundAccountApproval\r\n                    )\r\n                )\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n                dispatch(fundAccountFailed(err))\r\n            })\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}