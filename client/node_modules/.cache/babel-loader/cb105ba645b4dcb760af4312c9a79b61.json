{"ast":null,"code":"import _objectSpread from \"/home/niscolinx/projects/fxcrypto/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport * as actionTypes from '../actions/actionTypes';\nimport update from '../utility';\nconst initialState = {\n  error: null,\n  loading: false,\n  userId: sessionStorage.getItem('userId') || null,\n  tokenId: sessionStorage.getItem('token') || null,\n  userData: {},\n  userFundAccount: {},\n  activities: {},\n  latestDeposits: [],\n  latestWithdrawals: [],\n  userAccountBalance: 0,\n  siteOwner: sessionStorage.getItem('siteOwner') || false,\n  role: null,\n  email: null\n};\n\nconst authStart = (state, action) => {\n  return update(state, {\n    loading: true\n  });\n};\n\nconst authSuccess = (state, action) => {\n  return update(state, _objectSpread({}, action, {\n    loading: false,\n    userId: action.userId,\n    tokenId: action.tokenId,\n    role: action.role,\n    siteOwner: action.email === 'admin@royalinvestmentcoin.com' ? true : false,\n    email: action.email,\n    error: null\n  }));\n};\n\nconst authFailed = (state, action) => {\n  return update(state, {\n    loading: false,\n    error: {\n      page: action.page,\n      error: action.error\n    }\n  });\n};\n\nconst authRedirect = (state, action) => {\n  return update(state, {\n    loading: false,\n    redirect: action.to\n  });\n};\n\nconst clearError = (state, action) => {\n  return update(state, _objectSpread({}, action, {\n    error: null\n  }));\n};\n\nconst getUser = (state, action) => {\n  return update(state, _objectSpread({}, action, {\n    loading: false,\n    userData: action.data.user,\n    userFundAccount: action.data.userFundAccount,\n    userPendingDeposit: action.data.userPendingDeposit,\n    totalReceivedAmount: action.data.totalReceivedAmount,\n    totalDisbursedAmount: action.data.totalDisbursedAmount,\n    pendingDepositsCount: action.data.pendingDepositsCount,\n    pendingWithdrawalsCount: action.data.pendingWithdrawalsCount,\n    userDeposits: action.data.userDeposits,\n    userWithdrawals: action.data.userWithdrawals,\n    totalUserDeposits: action.data.totalUserDeposits,\n    totalUserWithdrawals: action.data.totalUserWithdrawals,\n    fundAccountCount: action.data.fundAccountCount,\n    lastDepositAmount: action.data.lastDepositAmount,\n    userPendingWithdrawalAmount: action.data.userPendingWithdrawalAmount\n  }));\n};\n\nconst getMember = (state, action) => {\n  return update(state, _objectSpread({}, action, {\n    loading: false,\n    member: action.data.user,\n    memberDeposits: action.data.userDeposits,\n    memberId: action.data.memberId,\n    memberWithdrawals: action.data.userWithdrawals\n  }));\n};\n\nconst authLogOut = (state, action) => {\n  return update(state, _objectSpread({}, action, {\n    loading: false,\n    userId: null,\n    tokenId: null,\n    error: null\n  }));\n};\n\nconst getActivitiesSuccess = (state, action) => {\n  return update(state, _objectSpread({}, action, {\n    loading: false,\n    error: null,\n    latestDeposits: action.data.theAllUsersDeposit,\n    latestWithdrawals: action.data.theAllUsersWithdrawal,\n    activities: action.data.updatedActivities\n  }));\n};\n\nconst auth = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.GET_ACTIVITIES:\n      return getActivitiesSuccess(state, action);\n\n    case actionTypes.AUTH_START:\n      return authStart(state, action);\n\n    case actionTypes.AUTH_GETUSER:\n      return getUser(state, action);\n\n    case actionTypes.AUTH_GETMEMBER:\n      return getMember(state, action);\n\n    case actionTypes.AUTH_REDIRECT:\n      return authRedirect(state, action);\n\n    case actionTypes.AUTH_SUCCESS:\n      return authSuccess(state, action);\n\n    case actionTypes.AUTH_FAILED:\n      return authFailed(state, action);\n\n    case actionTypes.AUTH_LOGOUT:\n      return authLogOut(state, action);\n\n    case actionTypes.AUTH_CLEAR_ERROR:\n      return clearError(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default auth;","map":{"version":3,"sources":["/home/niscolinx/projects/fxcrypto/client/src/store/reducers/auth.js"],"names":["actionTypes","update","initialState","error","loading","userId","sessionStorage","getItem","tokenId","userData","userFundAccount","activities","latestDeposits","latestWithdrawals","userAccountBalance","siteOwner","role","email","authStart","state","action","authSuccess","authFailed","page","authRedirect","redirect","to","clearError","getUser","data","user","userPendingDeposit","totalReceivedAmount","totalDisbursedAmount","pendingDepositsCount","pendingWithdrawalsCount","userDeposits","userWithdrawals","totalUserDeposits","totalUserWithdrawals","fundAccountCount","lastDepositAmount","userPendingWithdrawalAmount","getMember","member","memberDeposits","memberId","memberWithdrawals","authLogOut","getActivitiesSuccess","theAllUsersDeposit","theAllUsersWithdrawal","updatedActivities","auth","type","GET_ACTIVITIES","AUTH_START","AUTH_GETUSER","AUTH_GETMEMBER","AUTH_REDIRECT","AUTH_SUCCESS","AUTH_FAILED","AUTH_LOGOUT","AUTH_CLEAR_ERROR"],"mappings":"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","sourcesContent":["import * as actionTypes from '../actions/actionTypes'\nimport update from '../utility'\n\nconst initialState = {\n    error: null,\n    loading: false,\n    userId: sessionStorage.getItem('userId') || null,\n    tokenId: sessionStorage.getItem('token') || null,\n    userData: {},\n    userFundAccount: {},\n    activities: {},\n    latestDeposits: [],\n    latestWithdrawals: [],\n    userAccountBalance: 0,\n    siteOwner: sessionStorage.getItem('siteOwner') || false,\n    role: null,\n    email: null,\n}\nconst authStart = (state, action) => {\n    return update(state, {\n        loading: true,\n    })\n}\n\nconst authSuccess = (state, action) => {\n    return update(state, {\n        ...action,\n        loading: false,\n        userId: action.userId,\n        tokenId: action.tokenId,\n        role: action.role,\n        siteOwner: action.email === 'admin@royalinvestmentcoin.com' ? true : false,\n        email: action.email,\n        error: null,\n    })\n}\n\nconst authFailed = (state, action) => {\n    return update(state, {\n        loading: false,\n        error: {\n            page: action.page,\n            error: action.error,\n        },\n    })\n}\n\nconst authRedirect = (state, action) => {\n    return update(state, {\n        loading: false,\n        redirect: action.to,\n    })\n}\n\nconst clearError = (state, action) => {\n    return update(state, {\n        ...action,\n        error: null,\n    })\n}\n\nconst getUser = (state, action) => {\n    return update(state, {\n        ...action,\n        loading: false,\n        userData: action.data.user,\n        userFundAccount: action.data.userFundAccount,\n        userPendingDeposit: action.data.userPendingDeposit,\n        totalReceivedAmount: action.data.totalReceivedAmount,\n        totalDisbursedAmount: action.data.totalDisbursedAmount,\n        pendingDepositsCount: action.data.pendingDepositsCount,\n        pendingWithdrawalsCount: action.data.pendingWithdrawalsCount,\n        userDeposits: action.data.userDeposits,\n        userWithdrawals: action.data.userWithdrawals,\n        totalUserDeposits: action.data.totalUserDeposits,\n        totalUserWithdrawals: action.data.totalUserWithdrawals,\n        fundAccountCount: action.data.fundAccountCount,\n        lastDepositAmount: action.data.lastDepositAmount,\n        userPendingWithdrawalAmount: action.data.userPendingWithdrawalAmount,\n    })\n}\nconst getMember = (state, action) => {\n    return update(state, {\n        ...action,\n        loading: false,\n        member: action.data.user,\n        memberDeposits: action.data.userDeposits,\n        memberId: action.data.memberId,\n        memberWithdrawals: action.data.userWithdrawals,\n    })\n}\n\nconst authLogOut = (state, action) => {\n    return update(state, {\n        ...action,\n        loading: false,\n        userId: null,\n        tokenId: null,\n        error: null,\n    })\n}\n\nconst getActivitiesSuccess = (state, action) => {\n    return update(state, {\n        ...action,\n        loading: false,\n        error: null,\n        latestDeposits: action.data.theAllUsersDeposit,\n        latestWithdrawals: action.data.theAllUsersWithdrawal,\n        activities: action.data.updatedActivities,\n    })\n}\nconst auth = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.GET_ACTIVITIES:\n            return getActivitiesSuccess(state, action)\n        case actionTypes.AUTH_START:\n            return authStart(state, action)\n        case actionTypes.AUTH_GETUSER:\n            return getUser(state, action)\n        case actionTypes.AUTH_GETMEMBER:\n            return getMember(state, action)\n        case actionTypes.AUTH_REDIRECT:\n            return authRedirect(state, action)\n        case actionTypes.AUTH_SUCCESS:\n            return authSuccess(state, action)\n        case actionTypes.AUTH_FAILED:\n            return authFailed(state, action)\n        case actionTypes.AUTH_LOGOUT:\n            return authLogOut(state, action)\n        case actionTypes.AUTH_CLEAR_ERROR:\n            return clearError(state, action)\n        default:\n            return state\n    }\n}\n\nexport default auth\n"]},"metadata":{},"sourceType":"module"}