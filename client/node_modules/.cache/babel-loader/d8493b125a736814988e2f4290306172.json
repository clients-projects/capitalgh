{"ast":null,"code":"import * as actions from './actionTypes'; //const URL = 'http://localhost:3030/api/graphql'\n\nconst URL = 'https://fxcrypto.herokuapp.com/api/graphql'; //const URL = 'http://robot44-env.eba-imcy7pye.us-east-1.elasticbeanstalk.com/api/graphql'\n\nexport const authStart = () => {\n  return {\n    type: actions.AUTH_START\n  };\n};\nexport const authSuccessCheck = (auth, token, role, email) => {\n  return dispatch => {\n    sessionStorage.setItem('userId', auth);\n    sessionStorage.setItem('token', token);\n\n    if (email === 'admin@fxcryptotokeninvestment.com') {\n      sessionStorage.setItem('siteOwner', true);\n    }\n\n    const remainingMilliseconds = 3600 * 1000;\n    const expiryDate = new Date(new Date().getTime() + remainingMilliseconds); //After set this to calculate the expiration based on the sessionStorage\n\n    sessionStorage.setItem('expiryTime', remainingMilliseconds);\n    sessionStorage.setItem('expiryDate', expiryDate.toISOString());\n    dispatch(authSuccess(auth, token, role, email));\n    setTimeout(() => {}, remainingMilliseconds);\n  };\n};\nexport const getActivitiesSuccess = data => {\n  return {\n    type: actions.GET_ACTIVITIES,\n    data\n  };\n};\nexport const authSuccess = (auth, token, role, email) => {\n  return {\n    type: actions.AUTH_SUCCESS,\n    userId: auth,\n    tokenId: token,\n    role,\n    email\n  };\n};\nexport const authFailed = (page, error) => {\n  return {\n    type: actions.AUTH_FAILED,\n    page,\n    error\n  };\n};\nexport const redirect = (to, data) => {\n  return {\n    type: actions.AUTH_REDIRECT,\n    to,\n    data\n  };\n};\nexport const logOut = () => {\n  sessionStorage.removeItem('token');\n  sessionStorage.removeItem('userId');\n  sessionStorage.removeItem('expiryDate');\n  sessionStorage.removeItem('siteOwner');\n  return {\n    type: actions.AUTH_LOGOUT\n  };\n};\nexport const clearError = () => {\n  return {\n    type: actions.AUTH_CLEAR_ERROR\n  };\n};\nexport const getUser = data => {\n  return {\n    type: actions.AUTH_GETUSER,\n    data\n  };\n};\nexport const getMember = data => {\n  return {\n    type: actions.AUTH_GETMEMBER,\n    data\n  };\n};\nexport const initGetUser = token => {\n  return dispatch => {\n    dispatch(authStart());\n    const graphqlQuery = {\n      query: \"{\\n                \\n                getUser {\\n\\n                    user {\\n                        username\\n                        email\\n                        fullname\\n                        ethereumAccount\\n                        bitcoinAccount\\n                        accountBalance\\n                        role\\n                        phone\\n                        upline\\n                        dailyEarning\\n                        totalEarnings\\n                        referralLink\\n                        activeReferrals\\n                        totalReferralCommission\\n                        totalReferrals\\n                        accountBalance\\n                        country\\n                        city\\n                        status\\n                        createdAt\\n                        updatedAt\\n                        \\n                        referrals {\\n                            username\\n                        }\\n                     }\\n        \\n                    userPendingDeposit {\\n                        _id\\n                        amount\\n                        status\\n                        planName\\n                        currency\\n                        createdAt\\n                        updatedAt\\n                    }\\n\\n                      userFundAccount {    \\n                        _id \\n                        amount\\n                        status\\n                        currency\\n                        createdAt\\n                        updatedAt\\n                    }\\n\\n                    userDeposits {\\n                        _id\\n                        amount\\n                        profit\\n                        createdAt\\n                        updatedAt\\n                    }\\n                    userWithdrawals {\\n                        _id\\n                        amount\\n                        createdAt\\n                        updatedAt\\n                    }\\n\\n                    totalDisbursedAmount\\n                    totalReceivedAmount\\n                    pendingWithdrawalsCount\\n                    pendingDepositsCount\\n                    totalUserDeposits\\n                    totalUserWithdrawals\\n                    fundAccountCount\\n                    lastDepositAmount\\n                    userPendingWithdrawalAmount\\n            }\\n            }\"\n    };\n    fetch(URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      },\n      body: JSON.stringify(graphqlQuery)\n    }).then(res => {\n      return res.json();\n    }).then(resData => {\n      if (resData.errors) {\n        dispatch(authFailed('getUser', resData.errors[0].message));\n      }\n\n      dispatch(getUser(resData.data.getUser));\n    }).catch(err => {\n      console.log('error in getUser', err);\n      return dispatch(authFailed('getUser', 'Failed to fetch (500)'));\n    });\n  };\n};\nexport const initGetMember = (id, token) => {\n  return dispatch => {\n    dispatch(authStart());\n    const graphqlQuery = {\n      query: \"{\\n                \\n                getMember(id: \\\"\".concat(id, \"\\\") {\\n\\n                    user {\\n                        username\\n                        email\\n                        fullname\\n                        ethereumAccount\\n                        bitcoinAccount\\n                        accountBalance\\n                        role\\n                        phone\\n                        upline\\n                        dailyEarning\\n                        totalEarnings\\n                        referralLink\\n                        activeReferrals\\n                        totalReferralCommission\\n                        totalReferrals\\n                        country\\n                        city\\n                        status\\n                        createdAt\\n                        updatedAt\\n                        \\n                        referrals {\\n                            username\\n                        }\\n                     }\\n        \\n               \\n\\n\\n                    userDeposits {\\n                        fundNO\\n                        amount\\n                        planName\\n                        profit\\n                        updatedAt\\n                    }\\n                    userWithdrawals {\\n                        _id\\n                        amount\\n                        updatedAt\\n                    }\\n\\n                    memberId{\\n                        _id\\n                    }\\n\\n            }\\n            }\")\n    };\n    fetch(URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      },\n      body: JSON.stringify(graphqlQuery)\n    }).then(res => {\n      return res.json();\n    }).then(resData => {\n      if (resData.errors) {\n        console.log('resData error of getMember', resData.errors);\n        dispatch(authFailed('getUser', resData.errors[0].message));\n      }\n\n      dispatch(getMember(resData.data.getMember));\n    }).catch(err => {\n      console.log('error in getUser', err);\n      return dispatch(authFailed('getUser', 'Failed to fetch (500)'));\n    });\n  };\n};\nexport const initLogin = (email, password) => {\n  return dispatch => {\n    dispatch(authStart());\n    const graphqlQuery = {\n      query: \"{\\n                login(email: \\\"\".concat(email, \"\\\", password: \\\"\").concat(password, \"\\\"){\\n                userId\\n                token\\n                role\\n                email\\n            }\\n          }\\n         \")\n    };\n    fetch(URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(graphqlQuery)\n    }).then(res => {\n      return res.json();\n    }).then(resData => {\n      if (resData.errors) {\n        return dispatch(authFailed('login', resData.errors[0].message)); // throw new Error('Login failed!')\n      }\n\n      dispatch(authSuccessCheck(resData.data.login.userId, resData.data.login.token, resData.data.login.role, resData.data.login.email));\n    }).catch(err => {\n      console.log('error in login', err);\n      return dispatch(authFailed('login', 'Failed to fetch (500)'));\n    });\n  };\n};\nexport const initSignup = authData => {\n  return dispatch => {\n    dispatch(authStart());\n    const data = authData.signupForm;\n    const graphqlQuery = {\n      query: \" mutation { createUser(userData: {\\n            username: \\\"\".concat(data.username.value, \"\\\",\\n            email: \\\"\").concat(data.confirmEmail.value, \"\\\",\\n            password: \\\"\").concat(data.confirmPassword.value, \"\\\",\\n            referral: \\\"\").concat(data.referral.value, \"\\\",\\n            fullname: \\\"\").concat(data.fullname.value, \"\\\",\\n            bitcoinAccount: \\\"\").concat(data.bitcoinAccount.value, \"\\\",\\n            ethereumAccount: \\\"\").concat(data.ethereumAccount.value, \"\\\"\\n           }) {  email username fullname }\\n         }\")\n    };\n    fetch(URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(graphqlQuery)\n    }).then(res => {\n      return res.json();\n    }).then(resData => {\n      if (resData.errors) {\n        return dispatch(authFailed('signup', resData.errors[0].message)); // throw new Error('Creating a user failed!')\n      }\n\n      dispatch(redirect('/Auth/login', resData.data.createUser));\n    }).catch(err => {\n      console.log('error in signup', err);\n      return dispatch(authFailed('signup', 'Failed to fetch (500)'));\n    });\n  };\n};\nexport const initActivities = token => {\n  return dispatch => {\n    dispatch(authStart());\n    let graphqlQuery = {\n      query: \"{\\n                getActivities {\\n                    updatedActivities {\\n                        onlineDays\\n                        totalMembers\\n                        totalPaidOut\\n                        totalInvestments\\n                        siteTotalPaidOut\\n                        siteTotalInvestments\\n                        newestMember\\n                        lastDepositName\\n                        lastDepositAmount\\n                        lastWithdrawalName\\n                        lastWithdrawalAmount\\n                    }\\n               \\n                    theAllUsersDeposit {\\n                        creator\\n                        amount\\n                        currency\\n                        updatedAt\\n                    }\\n                    theAllUsersWithdrawal {\\n                        creator\\n                        amount\\n                        currency\\n                        updatedAt\\n                    }\\n                }\\n            }\"\n    };\n    return fetch(URL + '/api/graphql', {\n      method: 'POST',\n      body: JSON.stringify(graphqlQuery),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    }).then(res => {\n      return res.json();\n    }).then(resData => {\n      if (resData.errors) {\n        dispatch(authFailed(resData.errors[0].message));\n      }\n\n      dispatch(getActivitiesSuccess(resData.data.getActivities));\n    }).catch(err => {\n      console.log(err);\n      dispatch(authFailed(err));\n    });\n  };\n};","map":{"version":3,"sources":["/home/niscolinx/projects/fxcrypto/client/src/store/actions/Auth.js"],"names":["actions","URL","authStart","type","AUTH_START","authSuccessCheck","auth","token","role","email","dispatch","sessionStorage","setItem","remainingMilliseconds","expiryDate","Date","getTime","toISOString","authSuccess","setTimeout","getActivitiesSuccess","data","GET_ACTIVITIES","AUTH_SUCCESS","userId","tokenId","authFailed","page","error","AUTH_FAILED","redirect","to","AUTH_REDIRECT","logOut","removeItem","AUTH_LOGOUT","clearError","AUTH_CLEAR_ERROR","getUser","AUTH_GETUSER","getMember","AUTH_GETMEMBER","initGetUser","graphqlQuery","query","fetch","method","headers","Authorization","body","JSON","stringify","then","res","json","resData","errors","message","catch","err","console","log","initGetMember","id","initLogin","password","login","initSignup","authData","signupForm","username","value","confirmEmail","confirmPassword","referral","fullname","bitcoinAccount","ethereumAccount","createUser","initActivities","getActivities"],"mappings":"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","sourcesContent":["import * as actions from './actionTypes'\r\n\r\n//const URL = 'http://localhost:3030/api/graphql'\r\n\r\nconst URL = 'https://fxcrypto.herokuapp.com/api/graphql'\r\n\r\n//const URL = 'http://robot44-env.eba-imcy7pye.us-east-1.elasticbeanstalk.com/api/graphql'\r\n\r\nexport const authStart = () => {\r\n    return {\r\n        type: actions.AUTH_START,\r\n    }\r\n}\r\n\r\nexport const authSuccessCheck = (auth, token, role, email) => {\r\n    return (dispatch) => {\r\n        sessionStorage.setItem('userId', auth)\r\n        sessionStorage.setItem('token', token)\r\n\r\n        if (email === 'admin@fxcryptotokeninvestment.com') {\r\n            sessionStorage.setItem('siteOwner', true)\r\n        }\r\n\r\n        const remainingMilliseconds = 3600 * 1000\r\n        const expiryDate = new Date(\r\n            new Date().getTime() + remainingMilliseconds\r\n        )\r\n\r\n        //After set this to calculate the expiration based on the sessionStorage\r\n        sessionStorage.setItem('expiryTime', remainingMilliseconds)\r\n        sessionStorage.setItem('expiryDate', expiryDate.toISOString())\r\n        dispatch(authSuccess(auth, token, role, email))\r\n\r\n        setTimeout(() => {}, remainingMilliseconds)\r\n    }\r\n}\r\n\r\nexport const getActivitiesSuccess = (data) => {\r\n    return {\r\n        type: actions.GET_ACTIVITIES,\r\n        data,\r\n    }\r\n}\r\nexport const authSuccess = (auth, token, role, email) => {\r\n    return {\r\n        type: actions.AUTH_SUCCESS,\r\n        userId: auth,\r\n        tokenId: token,\r\n        role,\r\n        email,\r\n    }\r\n}\r\n\r\nexport const authFailed = (page, error) => {\r\n    return {\r\n        type: actions.AUTH_FAILED,\r\n        page,\r\n        error,\r\n    }\r\n}\r\n\r\nexport const redirect = (to, data) => {\r\n    return {\r\n        type: actions.AUTH_REDIRECT,\r\n        to,\r\n        data,\r\n    }\r\n}\r\n\r\nexport const logOut = () => {\r\n    sessionStorage.removeItem('token')\r\n    sessionStorage.removeItem('userId')\r\n    sessionStorage.removeItem('expiryDate')\r\n    sessionStorage.removeItem('siteOwner')\r\n\r\n    return {\r\n        type: actions.AUTH_LOGOUT,\r\n    }\r\n}\r\n\r\nexport const clearError = () => {\r\n    return {\r\n        type: actions.AUTH_CLEAR_ERROR,\r\n    }\r\n}\r\n\r\nexport const getUser = (data) => {\r\n    return {\r\n        type: actions.AUTH_GETUSER,\r\n        data,\r\n    }\r\n}\r\nexport const getMember = (data) => {\r\n    return {\r\n        type: actions.AUTH_GETMEMBER,\r\n        data,\r\n    }\r\n}\r\n\r\nexport const initGetUser = (token) => {\r\n    return (dispatch) => {\r\n        dispatch(authStart())\r\n        const graphqlQuery = {\r\n            query: `{\r\n                \r\n                getUser {\r\n\r\n                    user {\r\n                        username\r\n                        email\r\n                        fullname\r\n                        ethereumAccount\r\n                        bitcoinAccount\r\n                        accountBalance\r\n                        role\r\n                        phone\r\n                        upline\r\n                        dailyEarning\r\n                        totalEarnings\r\n                        referralLink\r\n                        activeReferrals\r\n                        totalReferralCommission\r\n                        totalReferrals\r\n                        accountBalance\r\n                        country\r\n                        city\r\n                        status\r\n                        createdAt\r\n                        updatedAt\r\n                        \r\n                        referrals {\r\n                            username\r\n                        }\r\n                     }\r\n        \r\n                    userPendingDeposit {\r\n                        _id\r\n                        amount\r\n                        status\r\n                        planName\r\n                        currency\r\n                        createdAt\r\n                        updatedAt\r\n                    }\r\n\r\n                      userFundAccount {    \r\n                        _id \r\n                        amount\r\n                        status\r\n                        currency\r\n                        createdAt\r\n                        updatedAt\r\n                    }\r\n\r\n                    userDeposits {\r\n                        _id\r\n                        amount\r\n                        profit\r\n                        createdAt\r\n                        updatedAt\r\n                    }\r\n                    userWithdrawals {\r\n                        _id\r\n                        amount\r\n                        createdAt\r\n                        updatedAt\r\n                    }\r\n\r\n                    totalDisbursedAmount\r\n                    totalReceivedAmount\r\n                    pendingWithdrawalsCount\r\n                    pendingDepositsCount\r\n                    totalUserDeposits\r\n                    totalUserWithdrawals\r\n                    fundAccountCount\r\n                    lastDepositAmount\r\n                    userPendingWithdrawalAmount\r\n            }\r\n            }`,\r\n        }\r\n        fetch(URL, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: 'Bearer ' + token,\r\n            },\r\n            body: JSON.stringify(graphqlQuery),\r\n        })\r\n            .then((res) => {\r\n                return res.json()\r\n            })\r\n            .then((resData) => {\r\n                if (resData.errors) {\r\n                    dispatch(authFailed('getUser', resData.errors[0].message))\r\n                }\r\n                dispatch(getUser(resData.data.getUser))\r\n            })\r\n            .catch((err) => {\r\n                console.log('error in getUser', err)\r\n                return dispatch(authFailed('getUser', 'Failed to fetch (500)'))\r\n            })\r\n    }\r\n}\r\nexport const initGetMember = (id, token) => {\r\n    return (dispatch) => {\r\n        dispatch(authStart())\r\n        const graphqlQuery = {\r\n            query: `{\r\n                \r\n                getMember(id: \"${id}\") {\r\n\r\n                    user {\r\n                        username\r\n                        email\r\n                        fullname\r\n                        ethereumAccount\r\n                        bitcoinAccount\r\n                        accountBalance\r\n                        role\r\n                        phone\r\n                        upline\r\n                        dailyEarning\r\n                        totalEarnings\r\n                        referralLink\r\n                        activeReferrals\r\n                        totalReferralCommission\r\n                        totalReferrals\r\n                        country\r\n                        city\r\n                        status\r\n                        createdAt\r\n                        updatedAt\r\n                        \r\n                        referrals {\r\n                            username\r\n                        }\r\n                     }\r\n        \r\n               \r\n\r\n\r\n                    userDeposits {\r\n                        fundNO\r\n                        amount\r\n                        planName\r\n                        profit\r\n                        updatedAt\r\n                    }\r\n                    userWithdrawals {\r\n                        _id\r\n                        amount\r\n                        updatedAt\r\n                    }\r\n\r\n                    memberId{\r\n                        _id\r\n                    }\r\n\r\n            }\r\n            }`,\r\n        }\r\n        fetch(URL, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: 'Bearer ' + token,\r\n            },\r\n            body: JSON.stringify(graphqlQuery),\r\n        })\r\n            .then((res) => {\r\n                return res.json()\r\n            })\r\n            .then((resData) => {\r\n                if (resData.errors) {\r\n                    console.log('resData error of getMember', resData.errors)\r\n                    dispatch(authFailed('getUser', resData.errors[0].message))\r\n                }\r\n                dispatch(getMember(resData.data.getMember))\r\n            })\r\n            .catch((err) => {\r\n                console.log('error in getUser', err)\r\n                return dispatch(authFailed('getUser', 'Failed to fetch (500)'))\r\n            })\r\n    }\r\n}\r\n\r\nexport const initLogin = (email, password) => {\r\n    return (dispatch) => {\r\n        dispatch(authStart())\r\n\r\n        const graphqlQuery = {\r\n            query: `{\r\n                login(email: \"${email}\", password: \"${password}\"){\r\n                userId\r\n                token\r\n                role\r\n                email\r\n            }\r\n          }\r\n         `,\r\n        }\r\n\r\n        fetch(URL, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(graphqlQuery),\r\n        })\r\n            .then((res) => {\r\n                return res.json()\r\n            })\r\n            .then((resData) => {\r\n                if (resData.errors) {\r\n                    return dispatch(\r\n                        authFailed('login', resData.errors[0].message)\r\n                    )\r\n                    // throw new Error('Login failed!')\r\n                }\r\n\r\n                dispatch(\r\n                    authSuccessCheck(\r\n                        resData.data.login.userId,\r\n                        resData.data.login.token,\r\n                        resData.data.login.role,\r\n                        resData.data.login.email\r\n                    )\r\n                )\r\n            })\r\n            .catch((err) => {\r\n                console.log('error in login', err)\r\n                return dispatch(authFailed('login', 'Failed to fetch (500)'))\r\n            })\r\n    }\r\n}\r\n\r\nexport const initSignup = (authData) => {\r\n    return (dispatch) => {\r\n        dispatch(authStart())\r\n\r\n        const data = authData.signupForm\r\n\r\n        const graphqlQuery = {\r\n            query: ` mutation { createUser(userData: {\r\n            username: \"${data.username.value}\",\r\n            email: \"${data.confirmEmail.value}\",\r\n            password: \"${data.confirmPassword.value}\",\r\n            referral: \"${data.referral.value}\",\r\n            fullname: \"${data.fullname.value}\",\r\n            bitcoinAccount: \"${data.bitcoinAccount.value}\",\r\n            ethereumAccount: \"${data.ethereumAccount.value}\"\r\n           }) {  email username fullname }\r\n         }`,\r\n        }\r\n\r\n        fetch(URL, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(graphqlQuery),\r\n        })\r\n            .then((res) => {\r\n                return res.json()\r\n            })\r\n            .then((resData) => {\r\n                if (resData.errors) {\r\n                    return dispatch(\r\n                        authFailed('signup', resData.errors[0].message)\r\n                    )\r\n                    // throw new Error('Creating a user failed!')\r\n                }\r\n\r\n                dispatch(redirect('/Auth/login', resData.data.createUser))\r\n            })\r\n            .catch((err) => {\r\n                console.log('error in signup', err)\r\n                return dispatch(authFailed('signup', 'Failed to fetch (500)'))\r\n            })\r\n    }\r\n}\r\n\r\nexport const initActivities = (token) => {\r\n    return (dispatch) => {\r\n        dispatch(authStart())\r\n\r\n        let graphqlQuery = {\r\n            query: `{\r\n                getActivities {\r\n                    updatedActivities {\r\n                        onlineDays\r\n                        totalMembers\r\n                        totalPaidOut\r\n                        totalInvestments\r\n                        siteTotalPaidOut\r\n                        siteTotalInvestments\r\n                        newestMember\r\n                        lastDepositName\r\n                        lastDepositAmount\r\n                        lastWithdrawalName\r\n                        lastWithdrawalAmount\r\n                    }\r\n               \r\n                    theAllUsersDeposit {\r\n                        creator\r\n                        amount\r\n                        currency\r\n                        updatedAt\r\n                    }\r\n                    theAllUsersWithdrawal {\r\n                        creator\r\n                        amount\r\n                        currency\r\n                        updatedAt\r\n                    }\r\n                }\r\n            }`,\r\n        }\r\n\r\n        return fetch(URL + '/api/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(graphqlQuery),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: 'Bearer ' + token,\r\n            },\r\n        })\r\n            .then((res) => {\r\n                return res.json()\r\n            })\r\n            .then((resData) => {\r\n                if (resData.errors) {\r\n                    dispatch(authFailed(resData.errors[0].message))\r\n                }\r\n\r\n                dispatch(getActivitiesSuccess(resData.data.getActivities))\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n                dispatch(authFailed(err))\r\n            })\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}