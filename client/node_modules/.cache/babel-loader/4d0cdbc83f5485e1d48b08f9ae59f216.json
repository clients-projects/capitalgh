{"ast":null,"code":"import * as actions from './actionTypes'; //const URL = 'http://localhost:3030'\n\nconst URL = 'https://royalinvest.herokuapp.com'; //const URL = 'http://robot44-env.eba-imcy7pye.us-east-1.elasticbeanstalk.com/api/graphql'\n\nexport const updateProfileStart = () => {\n  return {\n    type: actions.UPDATE_PROFILE_START\n  };\n};\nexport const updateProfileSuccess = data => {\n  return {\n    type: actions.UPDATE_PROFILE_SUCCESS,\n    data\n  };\n};\nexport const updateMemberSuccess = data => {\n  return {\n    type: actions.UPDATE_MEMBER_SUCCESS,\n    data\n  };\n};\nexport const updateProfitSuccess = data => {\n  return {\n    type: actions.UPDATE_MEMBER_SUCCESS,\n    data\n  };\n};\nexport const updateProfileFailed = err => {\n  return {\n    type: actions.UPDATE_PROFILE_FAILED,\n    err\n  };\n};\nexport const getAdminSuccess = data => {\n  return {\n    type: actions.GET_ADMIN_SUCCESS,\n    data\n  };\n};\nexport const getUsersStart = () => {\n  return {\n    type: actions.UPDATE_PROFILE_START\n  };\n};\nexport const getUsersSuccess = data => {\n  return {\n    type: actions.UPDATE_PROFILE_SUCCESS,\n    data\n  };\n};\nexport const getUsersFailed = err => {\n  return {\n    type: actions.UPDATE_PROFILE_FAILED,\n    err\n  };\n};\nexport const getUserHistoryStart = () => {\n  return {\n    type: actions.USER_HISTORY_START\n  };\n};\nexport const getUserHistorySuccess = data => {\n  return {\n    type: actions.USER_HISTORY_SUCCESS,\n    data\n  };\n};\nexport const getUserHistoryFailed = err => {\n  return {\n    type: actions.USER_HISTORY_FAILED,\n    err\n  };\n};\nexport const investNowStart = () => {\n  return {\n    type: actions.INVEST_NOW_START\n  };\n};\nexport const investNowSuccess = data => {\n  return {\n    type: actions.INVEST_NOW_SUCCESS,\n    data\n  };\n};\nexport const investNowApprovalSuccess = data => {\n  return {\n    type: actions.INVEST_NOW_APPROVAL_SUCCESS,\n    data\n  };\n};\nexport const investNowFailed = err => {\n  return {\n    type: actions.INVEST_NOW_FAILED,\n    err\n  };\n};\nexport const withdrawNowStart = () => {\n  return {\n    type: actions.WITHDRAW_NOW_START\n  };\n};\nexport const withdrawNowSuccess = data => {\n  return {\n    type: actions.WITHDRAW_NOW_SUCCESS,\n    data\n  };\n};\nexport const withdrawNowApprovalSuccess = data => {\n  return {\n    type: actions.WITHDRAW_NOW_APPROVAL_SUCCESS,\n    data\n  };\n};\nexport const withdrawNowFailed = err => {\n  return {\n    type: actions.WITHDRAW_NOW_FAILED,\n    err\n  };\n};\nexport const initUpdateProfile = (updateProfileData, token) => {\n  return dispatch => {\n    dispatch(updateProfileStart());\n    let graphqlQuery = {\n      query: \"\\n                mutation { createUpdateProfile(updateProfileData: {\\n                        username: \\\"\".concat(updateProfileData.username, \"\\\",\\n                        email: \\\"\").concat(updateProfileData.email, \"\\\",\\n                        oldEmail: \\\"\").concat(updateProfileData.oldEmail, \"\\\",\\n                        password: \\\"\").concat(updateProfileData.confirmPassword, \"\\\",\\n                        fullname: \\\"\").concat(updateProfileData.fullname, \"\\\",\\n                        city: \\\"\").concat(updateProfileData.city, \"\\\",\\n                        country: \\\"\").concat(updateProfileData.country, \"\\\",\\n                        phone: \\\"\").concat(updateProfileData.phone, \"\\\",\\n                        bitcoinAccount: \\\"\").concat(updateProfileData.bitcoin, \"\\\",\\n                        ethereumAccount: \\\"\").concat(updateProfileData.ethereum, \"\\\"\\n                    }){\\n                        \\n                        fullname\\n                        username\\n                        city\\n                        country\\n                        phone\\n                        bitcoinAccount\\n                        ethereumAccount\\n                        email\\n                        updatedAt\\n                        createdAt\\n                    }\\n                }\\n            \")\n    };\n    return fetch(URL + '/api/graphql', {\n      method: 'POST',\n      body: JSON.stringify(graphqlQuery),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    }).then(res => {\n      return res.json();\n    }).then(resData => {\n      if (resData.errors) {\n        dispatch(updateProfileFailed(resData.errors[0].message));\n      }\n\n      dispatch(updateProfileSuccess(resData.data));\n    }).catch(err => {\n      console.log(err);\n      dispatch(updateProfileFailed(err));\n    });\n  };\n};\nexport const initUpdateMember = (updateMemberData, token) => {\n  return dispatch => {\n    dispatch(updateProfileStart());\n    let graphqlQuery = {\n      query: \"\\n                mutation { createUpdateMember(updateMemberData: {\\n                        username: \\\"\".concat(updateMemberData.username, \"\\\",\\n                        email: \\\"\").concat(updateMemberData.email, \"\\\",\\n                        oldEmail: \\\"\").concat(updateMemberData.oldEmail, \"\\\",\\n                        activeReferrals: \\\"\").concat(updateMemberData.activeReferrals, \"\\\",\\n                        totalReferrals: \\\"\").concat(updateMemberData.totalReferrals, \"\\\",\\n                        dailyEarning: \\\"\").concat(updateMemberData.dailyEarning, \"\\\",\\n                        totalEarnings: \\\"\").concat(updateMemberData.totalEarnings, \"\\\",\\n                        totalReferralCommission: \\\"\").concat(updateMemberData.totalReferralCommission, \"\\\",\\n                        accountBalance: \\\"\").concat(updateMemberData.accountBalance, \"\\\",\\n                        password: \\\"\").concat(updateMemberData.confirmPassword, \"\\\",\\n                        fullname: \\\"\").concat(updateMemberData.fullname, \"\\\",\\n                        city: \\\"\").concat(updateMemberData.city, \"\\\",\\n                        country: \\\"\").concat(updateMemberData.country, \"\\\",\\n                        phone: \\\"\").concat(updateMemberData.phone, \"\\\",\\n                        bitcoinAccount: \\\"\").concat(updateMemberData.bitcoin, \"\\\",\\n                        ethereumAccount: \\\"\").concat(updateMemberData.ethereum, \"\\\"\\n                    }){\\n                        \\n                        fullname\\n                        username\\n                        city\\n                        country\\n                        activeReferrals\\n                        totalReferrals\\n                        totalReferralCommission\\n                        accountBalance\\n                        phone\\n                        bitcoinAccount\\n                        ethereumAccount\\n                        email\\n                        updatedAt\\n                        createdAt\\n                    }\\n                }\\n            \")\n    };\n    return fetch(URL + '/api/graphql', {\n      method: 'POST',\n      body: JSON.stringify(graphqlQuery),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    }).then(res => {\n      return res.json();\n    }).then(resData => {\n      if (resData.errors) {\n        dispatch(updateProfileFailed(resData.errors[0].message));\n      }\n\n      dispatch(updateMemberSuccess(resData.data));\n    }).catch(err => {\n      console.log(err);\n      dispatch(updateProfileFailed(err));\n    });\n  };\n};\nexport const initUpdateProfit = (updateProfitData, memberId, token) => {\n  return dispatch => {\n    dispatch(updateProfileStart());\n    let graphqlQuery = {\n      query: \"\\n                mutation  { createUpdateProfit(id: \\\"\".concat(memberId, \"\\\", updateProfitData:{ \\n                    profit: \\\"\").concat(updateProfitData, \"\\\"\\n                }){\\n                        updatedAt\\n                        createdAt\\n                    }\\n                }\\n            \")\n    };\n    return fetch(URL + '/api/graphql', {\n      method: 'POST',\n      body: JSON.stringify(graphqlQuery),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    }).then(res => {\n      return res.json();\n    }).then(resData => {\n      if (resData.errors) {\n        dispatch(updateProfileFailed(resData.errors[0].message));\n      }\n\n      dispatch(updateProfitSuccess(resData.data));\n    }).catch(err => {\n      console.log(err);\n      dispatch(updateProfileFailed(err));\n    });\n  };\n};\nexport const initGetUserHistory = token => {\n  return dispatch => {\n    dispatch(getUserHistoryStart());\n    let graphqlQuery = {\n      query: \"{\\n                getUserHistory {\\n                    getDepositHistory {                    \\n                        historyNO\\n                        planName\\n                        amount\\n                        profit\\n                        updatedAt\\n                    }\\n\\n                    getWithdrawalHistory {\\n                        historyNO\\n                        amount\\n                        currency\\n                        updatedAt\\n                    }\\n                }\\n            }\"\n    };\n    return fetch(URL + '/api/graphql', {\n      method: 'POST',\n      body: JSON.stringify(graphqlQuery),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    }).then(res => {\n      return res.json();\n    }).then(resData => {\n      if (resData.errors) {\n        dispatch(getUserHistoryFailed(resData.errors[0].message));\n      }\n\n      dispatch(getUserHistorySuccess(resData.data.getUserHistory));\n    }).catch(err => {\n      console.log(err);\n      dispatch(getUserHistoryFailed(err));\n    });\n  };\n};\nexport const initGetUsers = token => {\n  return dispatch => {\n    dispatch(getUsersStart());\n    let graphqlQuery = {\n      query: \"{\\n                getUsers {\\n                    getUser {   \\n                        userNO\\n                        username\\n                        email\\n                        status\\n                        updatedAt\\n                    }\\n\\n                    getUsersId {\\n                        _id\\n                    }\\n                }\\n            }\"\n    };\n    return fetch(URL + '/api/graphql', {\n      method: 'POST',\n      body: JSON.stringify(graphqlQuery),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    }).then(res => {\n      return res.json();\n    }).then(resData => {\n      if (resData.errors) {\n        dispatch(getUsersFailed(resData.errors[0].message));\n      }\n\n      dispatch(getUsersSuccess(resData.data.getUsers));\n    }).catch(err => {\n      console.log(err);\n      dispatch(getUsersFailed(err));\n    });\n  };\n};\nexport const initGetAdmin = token => {\n  return dispatch => {\n    dispatch(getUsersStart());\n    let graphqlQuery = {\n      query: \"{\\n                getAdmin {\\n                    bitcoinAccount\\n                    ethereumAccount\\n                    username\\n                    updatedAt\\n                }\\n            }\"\n    };\n    return fetch(URL + '/api/graphql', {\n      method: 'POST',\n      body: JSON.stringify(graphqlQuery),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    }).then(res => {\n      return res.json();\n    }).then(resData => {\n      if (resData.errors) {\n        dispatch(getUsersFailed(resData.errors[0].message));\n      }\n\n      dispatch(getAdminSuccess(resData.data.getAdmin));\n    }).catch(err => {\n      console.log(err);\n      dispatch(getUsersFailed(err));\n    });\n  };\n};\nexport const initWithdrawNow = (withdrawNowData, token) => {\n  return dispatch => {\n    dispatch(withdrawNowStart());\n    let graphqlQuery = {\n      query: \"\\n                mutation { createWithdrawNow(withdrawNowData: {\\n                        password: \\\"\".concat(withdrawNowData.password, \"\\\",\\n                        amount: \\\"\").concat(withdrawNowData.amount, \"\\\",\\n                        currency: \\\"\").concat(withdrawNowData.currency, \"\\\",\\n                    }){\\n                        _id\\n                        amount\\n                        currency\\n                        creator {\\n                            username\\n                        }\\n                        createdAt\\n                        updatedAt\\n                    }\\n                }\\n            \")\n    };\n    return fetch(URL + '/api/graphql', {\n      method: 'POST',\n      body: JSON.stringify(graphqlQuery),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    }).then(res => {\n      return res.json();\n    }).then(resData => {\n      if (resData.errors) {\n        dispatch(withdrawNowFailed(resData.errors[0].message));\n      }\n\n      dispatch(withdrawNowSuccess(resData.data));\n    }).catch(err => {\n      console.log(err);\n      dispatch(withdrawNowFailed(err));\n    });\n  };\n};\nexport const initInvestNow = (investNowData, token) => {\n  return dispatch => {\n    dispatch(investNowStart());\n    let graphqlQuery = {\n      query: \"\\n                mutation { createInvestNow(investNowData: {\\n                        selectedPlan: \\\"\".concat(investNowData.packageName, \"\\\",\\n                        amount: \\\"\").concat(investNowData.amountToDeposit, \"\\\",\\n                    }){\\n                        _id\\n                        amount\\n                        planName\\n                        creator {\\n                            username\\n                        }\\n                        createdAt\\n                        updatedAt\\n                    }\\n                }\\n            \")\n    };\n    return fetch(URL + '/api/graphql', {\n      method: 'POST',\n      body: JSON.stringify(graphqlQuery),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    }).then(res => {\n      return res.json();\n    }).then(resData => {\n      if (resData.errors) {\n        dispatch(investNowFailed(resData.errors[0].message));\n      }\n\n      dispatch(investNowSuccess(resData.data));\n    }).catch(err => {\n      console.log(err);\n      dispatch(investNowFailed(err));\n    });\n  };\n};\nexport const initInvestNowApproval = (id, token) => {\n  return dispatch => {\n    dispatch(investNowStart());\n    let graphqlQuery = {\n      query: \"\\n                mutation { createInvestNowApproval(PostId: {\\n                    id: \\\"\".concat(id, \"\\\"\\n                }){\\n                        _id\\n                        amount\\n                        currency\\n                        creator {\\n                            username\\n                        }\\n                        updatedAt\\n                    }\\n                },\\n            \")\n    };\n    return fetch(URL + '/api/graphql', {\n      method: 'POST',\n      body: JSON.stringify(graphqlQuery),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    }).then(res => {\n      return res.json();\n    }).then(resData => {\n      if (resData.errors) {\n        dispatch(investNowFailed(resData.errors[0].message));\n      }\n\n      dispatch(investNowApprovalSuccess(resData.data.createInvestNowApproval));\n    }).catch(err => {\n      console.log(err);\n      dispatch(investNowFailed(err));\n    });\n  };\n};\nexport const initWithdrawNowApproval = (id, token) => {\n  return dispatch => {\n    dispatch(withdrawNowStart());\n    let graphqlQuery = {\n      query: \"\\n                mutation { createWithdrawNowApproval(PostId: {\\n                    id: \\\"\".concat(id, \"\\\"\\n                }){\\n                        _id\\n                        amount\\n                        currency\\n                        creator {\\n                            username\\n                        }\\n                        updatedAt\\n                    }\\n                },\\n            \")\n    };\n    return fetch(URL + '/api/graphql', {\n      method: 'POST',\n      body: JSON.stringify(graphqlQuery),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    }).then(res => {\n      return res.json();\n    }).then(resData => {\n      if (resData.errors) {\n        dispatch(withdrawNowFailed(resData.errors[0].message));\n      }\n\n      dispatch(withdrawNowApprovalSuccess(resData.data.createwithdrawNowApproval));\n    }).catch(err => {\n      console.log(err);\n      dispatch(withdrawNowFailed(err));\n    });\n  };\n};","map":{"version":3,"sources":["/home/niscolinx/projects/fxcrypto/client/src/store/actions/user.js"],"names":["actions","URL","updateProfileStart","type","UPDATE_PROFILE_START","updateProfileSuccess","data","UPDATE_PROFILE_SUCCESS","updateMemberSuccess","UPDATE_MEMBER_SUCCESS","updateProfitSuccess","updateProfileFailed","err","UPDATE_PROFILE_FAILED","getAdminSuccess","GET_ADMIN_SUCCESS","getUsersStart","getUsersSuccess","getUsersFailed","getUserHistoryStart","USER_HISTORY_START","getUserHistorySuccess","USER_HISTORY_SUCCESS","getUserHistoryFailed","USER_HISTORY_FAILED","investNowStart","INVEST_NOW_START","investNowSuccess","INVEST_NOW_SUCCESS","investNowApprovalSuccess","INVEST_NOW_APPROVAL_SUCCESS","investNowFailed","INVEST_NOW_FAILED","withdrawNowStart","WITHDRAW_NOW_START","withdrawNowSuccess","WITHDRAW_NOW_SUCCESS","withdrawNowApprovalSuccess","WITHDRAW_NOW_APPROVAL_SUCCESS","withdrawNowFailed","WITHDRAW_NOW_FAILED","initUpdateProfile","updateProfileData","token","dispatch","graphqlQuery","query","username","email","oldEmail","confirmPassword","fullname","city","country","phone","bitcoin","ethereum","fetch","method","body","JSON","stringify","headers","Authorization","then","res","json","resData","errors","message","catch","console","log","initUpdateMember","updateMemberData","activeReferrals","totalReferrals","dailyEarning","totalEarnings","totalReferralCommission","accountBalance","initUpdateProfit","updateProfitData","memberId","initGetUserHistory","getUserHistory","initGetUsers","getUsers","initGetAdmin","getAdmin","initWithdrawNow","withdrawNowData","password","amount","currency","initInvestNow","investNowData","packageName","amountToDeposit","initInvestNowApproval","id","createInvestNowApproval","initWithdrawNowApproval","createwithdrawNowApproval"],"mappings":"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","sourcesContent":["import * as actions from './actionTypes'\r\n\r\n//const URL = 'http://localhost:3030'\r\n\r\nconst URL = 'https://royalinvest.herokuapp.com'\r\n\r\n//const URL = 'http://robot44-env.eba-imcy7pye.us-east-1.elasticbeanstalk.com/api/graphql'\r\n\r\nexport const updateProfileStart = () => {\r\n    return {\r\n        type: actions.UPDATE_PROFILE_START,\r\n    }\r\n}\r\nexport const updateProfileSuccess = (data) => {\r\n    return {\r\n        type: actions.UPDATE_PROFILE_SUCCESS,\r\n        data,\r\n    }\r\n}\r\nexport const updateMemberSuccess = (data) => {\r\n    return {\r\n        type: actions.UPDATE_MEMBER_SUCCESS,\r\n        data,\r\n    }\r\n}\r\nexport const updateProfitSuccess = (data) => {\r\n    return {\r\n        type: actions.UPDATE_MEMBER_SUCCESS,\r\n        data,\r\n    }\r\n}\r\nexport const updateProfileFailed = (err) => {\r\n    return {\r\n        type: actions.UPDATE_PROFILE_FAILED,\r\n        err,\r\n    }\r\n}\r\nexport const getAdminSuccess = (data) => {\r\n    return {\r\n        type: actions.GET_ADMIN_SUCCESS,\r\n        data,\r\n    }\r\n}\r\nexport const getUsersStart = () => {\r\n    return {\r\n        type: actions.UPDATE_PROFILE_START,\r\n    }\r\n}\r\nexport const getUsersSuccess = (data) => {\r\n    return {\r\n        type: actions.UPDATE_PROFILE_SUCCESS,\r\n        data,\r\n    }\r\n}\r\nexport const getUsersFailed = (err) => {\r\n    return {\r\n        type: actions.UPDATE_PROFILE_FAILED,\r\n        err,\r\n    }\r\n}\r\nexport const getUserHistoryStart = () => {\r\n    return {\r\n        type: actions.USER_HISTORY_START,\r\n    }\r\n}\r\nexport const getUserHistorySuccess = (data) => {\r\n    return {\r\n        type: actions.USER_HISTORY_SUCCESS,\r\n        data,\r\n    }\r\n}\r\nexport const getUserHistoryFailed = (err) => {\r\n    return {\r\n        type: actions.USER_HISTORY_FAILED,\r\n        err,\r\n    }\r\n}\r\n\r\nexport const investNowStart = () => {\r\n    return {\r\n        type: actions.INVEST_NOW_START,\r\n    }\r\n}\r\nexport const investNowSuccess = (data) => {\r\n    return {\r\n        type: actions.INVEST_NOW_SUCCESS,\r\n        data,\r\n    }\r\n}\r\nexport const investNowApprovalSuccess = (data) => {\r\n    return {\r\n        type: actions.INVEST_NOW_APPROVAL_SUCCESS,\r\n        data,\r\n    }\r\n}\r\n\r\nexport const investNowFailed = (err) => {\r\n    return {\r\n        type: actions.INVEST_NOW_FAILED,\r\n        err,\r\n    }\r\n}\r\nexport const withdrawNowStart = () => {\r\n    return {\r\n        type: actions.WITHDRAW_NOW_START,\r\n    }\r\n}\r\nexport const withdrawNowSuccess = (data) => {\r\n    return {\r\n        type: actions.WITHDRAW_NOW_SUCCESS,\r\n        data,\r\n    }\r\n}\r\n\r\nexport const withdrawNowApprovalSuccess = (data) => {\r\n    return {\r\n        type: actions.WITHDRAW_NOW_APPROVAL_SUCCESS,\r\n        data,\r\n    }\r\n}\r\n\r\nexport const withdrawNowFailed = (err) => {\r\n    return {\r\n        type: actions.WITHDRAW_NOW_FAILED,\r\n        err,\r\n    }\r\n}\r\n\r\nexport const initUpdateProfile = (updateProfileData, token) => {\r\n    return (dispatch) => {\r\n        dispatch(updateProfileStart())\r\n\r\n        let graphqlQuery = {\r\n            query: `\r\n                mutation { createUpdateProfile(updateProfileData: {\r\n                        username: \"${updateProfileData.username}\",\r\n                        email: \"${updateProfileData.email}\",\r\n                        oldEmail: \"${updateProfileData.oldEmail}\",\r\n                        password: \"${updateProfileData.confirmPassword}\",\r\n                        fullname: \"${updateProfileData.fullname}\",\r\n                        city: \"${updateProfileData.city}\",\r\n                        country: \"${updateProfileData.country}\",\r\n                        phone: \"${updateProfileData.phone}\",\r\n                        bitcoinAccount: \"${updateProfileData.bitcoin}\",\r\n                        ethereumAccount: \"${updateProfileData.ethereum}\"\r\n                    }){\r\n                        \r\n                        fullname\r\n                        username\r\n                        city\r\n                        country\r\n                        phone\r\n                        bitcoinAccount\r\n                        ethereumAccount\r\n                        email\r\n                        updatedAt\r\n                        createdAt\r\n                    }\r\n                }\r\n            `,\r\n        }\r\n\r\n        return fetch(URL + '/api/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(graphqlQuery),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: 'Bearer ' + token,\r\n            },\r\n        })\r\n            .then((res) => {\r\n                return res.json()\r\n            })\r\n            .then((resData) => {\r\n                if (resData.errors) {\r\n                    dispatch(updateProfileFailed(resData.errors[0].message))\r\n                }\r\n\r\n                dispatch(updateProfileSuccess(resData.data))\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n                dispatch(updateProfileFailed(err))\r\n            })\r\n    }\r\n}\r\nexport const initUpdateMember = (updateMemberData, token) => {\r\n    return (dispatch) => {\r\n        dispatch(updateProfileStart())\r\n\r\n        let graphqlQuery = {\r\n            query: `\r\n                mutation { createUpdateMember(updateMemberData: {\r\n                        username: \"${updateMemberData.username}\",\r\n                        email: \"${updateMemberData.email}\",\r\n                        oldEmail: \"${updateMemberData.oldEmail}\",\r\n                        activeReferrals: \"${updateMemberData.activeReferrals}\",\r\n                        totalReferrals: \"${updateMemberData.totalReferrals}\",\r\n                        dailyEarning: \"${updateMemberData.dailyEarning}\",\r\n                        totalEarnings: \"${updateMemberData.totalEarnings}\",\r\n                        totalReferralCommission: \"${updateMemberData.totalReferralCommission}\",\r\n                        accountBalance: \"${updateMemberData.accountBalance}\",\r\n                        password: \"${updateMemberData.confirmPassword}\",\r\n                        fullname: \"${updateMemberData.fullname}\",\r\n                        city: \"${updateMemberData.city}\",\r\n                        country: \"${updateMemberData.country}\",\r\n                        phone: \"${updateMemberData.phone}\",\r\n                        bitcoinAccount: \"${updateMemberData.bitcoin}\",\r\n                        ethereumAccount: \"${updateMemberData.ethereum}\"\r\n                    }){\r\n                        \r\n                        fullname\r\n                        username\r\n                        city\r\n                        country\r\n                        activeReferrals\r\n                        totalReferrals\r\n                        totalReferralCommission\r\n                        accountBalance\r\n                        phone\r\n                        bitcoinAccount\r\n                        ethereumAccount\r\n                        email\r\n                        updatedAt\r\n                        createdAt\r\n                    }\r\n                }\r\n            `,\r\n        }\r\n\r\n        return fetch(URL + '/api/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(graphqlQuery),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: 'Bearer ' + token,\r\n            },\r\n        })\r\n            .then((res) => {\r\n                return res.json()\r\n            })\r\n            .then((resData) => {\r\n                if (resData.errors) {\r\n                    dispatch(updateProfileFailed(resData.errors[0].message))\r\n                }\r\n\r\n                dispatch(updateMemberSuccess(resData.data))\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n                dispatch(updateProfileFailed(err))\r\n            })\r\n    }\r\n}\r\n\r\nexport const initUpdateProfit = (updateProfitData, memberId, token) => {\r\n    return (dispatch) => {\r\n        dispatch(updateProfileStart())\r\n\r\n\r\n        let graphqlQuery = {\r\n            query: `\r\n                mutation  { createUpdateProfit(id: \"${memberId}\", updateProfitData:{ \r\n                    profit: \"${updateProfitData}\"\r\n                }){\r\n                        updatedAt\r\n                        createdAt\r\n                    }\r\n                }\r\n            `,\r\n        }\r\n\r\n        return fetch(URL + '/api/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(graphqlQuery),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: 'Bearer ' + token,\r\n            },\r\n        })\r\n            .then((res) => {\r\n                return res.json()\r\n            })\r\n            .then((resData) => {\r\n                if (resData.errors) {\r\n                    dispatch(updateProfileFailed(resData.errors[0].message))\r\n                }\r\n\r\n                dispatch(updateProfitSuccess(resData.data))\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n                dispatch(updateProfileFailed(err))\r\n            })\r\n    }\r\n}\r\nexport const initGetUserHistory = (token) => {\r\n    return (dispatch) => {\r\n        dispatch(getUserHistoryStart())\r\n\r\n        let graphqlQuery = {\r\n            query: `{\r\n                getUserHistory {\r\n                    getDepositHistory {                    \r\n                        historyNO\r\n                        planName\r\n                        amount\r\n                        profit\r\n                        updatedAt\r\n                    }\r\n\r\n                    getWithdrawalHistory {\r\n                        historyNO\r\n                        amount\r\n                        currency\r\n                        updatedAt\r\n                    }\r\n                }\r\n            }`,\r\n        }\r\n\r\n        return fetch(URL + '/api/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(graphqlQuery),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: 'Bearer ' + token,\r\n            },\r\n        })\r\n            .then((res) => {\r\n                return res.json()\r\n            })\r\n            .then((resData) => {\r\n                if (resData.errors) {\r\n                    dispatch(getUserHistoryFailed(resData.errors[0].message))\r\n                }\r\n\r\n                dispatch(getUserHistorySuccess(resData.data.getUserHistory))\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n                dispatch(getUserHistoryFailed(err))\r\n            })\r\n    }\r\n}\r\nexport const initGetUsers = (token) => {\r\n    return (dispatch) => {\r\n        dispatch(getUsersStart())\r\n\r\n        let graphqlQuery = {\r\n            query: `{\r\n                getUsers {\r\n                    getUser {   \r\n                        userNO\r\n                        username\r\n                        email\r\n                        status\r\n                        updatedAt\r\n                    }\r\n\r\n                    getUsersId {\r\n                        _id\r\n                    }\r\n                }\r\n            }`,\r\n        }\r\n\r\n        return fetch(URL + '/api/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(graphqlQuery),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: 'Bearer ' + token,\r\n            },\r\n        })\r\n            .then((res) => {\r\n                return res.json()\r\n            })\r\n            .then((resData) => {\r\n                if (resData.errors) {\r\n                    dispatch(getUsersFailed(resData.errors[0].message))\r\n                }\r\n\r\n                dispatch(getUsersSuccess(resData.data.getUsers))\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n                dispatch(getUsersFailed(err))\r\n            })\r\n    }\r\n}\r\nexport const initGetAdmin = (token) => {\r\n    return (dispatch) => {\r\n        dispatch(getUsersStart())\r\n\r\n        let graphqlQuery = {\r\n            query: `{\r\n                getAdmin {\r\n                    bitcoinAccount\r\n                    ethereumAccount\r\n                    username\r\n                    updatedAt\r\n                }\r\n            }`,\r\n        }\r\n\r\n        return fetch(URL + '/api/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(graphqlQuery),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: 'Bearer ' + token,\r\n            },\r\n        })\r\n            .then((res) => {\r\n                return res.json()\r\n            })\r\n            .then((resData) => {\r\n                if (resData.errors) {\r\n                    dispatch(getUsersFailed(resData.errors[0].message))\r\n                }\r\n\r\n                dispatch(getAdminSuccess(resData.data.getAdmin))\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n                dispatch(getUsersFailed(err))\r\n            })\r\n    }\r\n}\r\n\r\nexport const initWithdrawNow = (withdrawNowData, token) => {\r\n    return (dispatch) => {\r\n        dispatch(withdrawNowStart())\r\n\r\n        let graphqlQuery = {\r\n            query: `\r\n                mutation { createWithdrawNow(withdrawNowData: {\r\n                        password: \"${withdrawNowData.password}\",\r\n                        amount: \"${withdrawNowData.amount}\",\r\n                        currency: \"${withdrawNowData.currency}\",\r\n                    }){\r\n                        _id\r\n                        amount\r\n                        currency\r\n                        creator {\r\n                            username\r\n                        }\r\n                        createdAt\r\n                        updatedAt\r\n                    }\r\n                }\r\n            `,\r\n        }\r\n\r\n        return fetch(URL + '/api/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(graphqlQuery),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: 'Bearer ' + token,\r\n            },\r\n        })\r\n            .then((res) => {\r\n                return res.json()\r\n            })\r\n            .then((resData) => {\r\n                if (resData.errors) {\r\n                    dispatch(withdrawNowFailed(resData.errors[0].message))\r\n                }\r\n\r\n                dispatch(withdrawNowSuccess(resData.data))\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n                dispatch(withdrawNowFailed(err))\r\n            })\r\n    }\r\n}\r\nexport const initInvestNow = (investNowData, token) => {\r\n    return (dispatch) => {\r\n        dispatch(investNowStart())\r\n\r\n        let graphqlQuery = {\r\n            query: `\r\n                mutation { createInvestNow(investNowData: {\r\n                        selectedPlan: \"${investNowData.packageName}\",\r\n                        amount: \"${investNowData.amountToDeposit}\",\r\n                    }){\r\n                        _id\r\n                        amount\r\n                        planName\r\n                        creator {\r\n                            username\r\n                        }\r\n                        createdAt\r\n                        updatedAt\r\n                    }\r\n                }\r\n            `,\r\n        }\r\n\r\n        return fetch(URL + '/api/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(graphqlQuery),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: 'Bearer ' + token,\r\n            },\r\n        })\r\n            .then((res) => {\r\n                return res.json()\r\n            })\r\n            .then((resData) => {\r\n                if (resData.errors) {\r\n                    dispatch(investNowFailed(resData.errors[0].message))\r\n                }\r\n\r\n                dispatch(investNowSuccess(resData.data))\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n                dispatch(investNowFailed(err))\r\n            })\r\n    }\r\n}\r\n\r\nexport const initInvestNowApproval = (id, token) => {\r\n    return (dispatch) => {\r\n        dispatch(investNowStart())\r\n\r\n        let graphqlQuery = {\r\n            query: `\r\n                mutation { createInvestNowApproval(PostId: {\r\n                    id: \"${id}\"\r\n                }){\r\n                        _id\r\n                        amount\r\n                        currency\r\n                        creator {\r\n                            username\r\n                        }\r\n                        updatedAt\r\n                    }\r\n                },\r\n            `,\r\n        }\r\n\r\n        return fetch(URL + '/api/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(graphqlQuery),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: 'Bearer ' + token,\r\n            },\r\n        })\r\n            .then((res) => {\r\n                return res.json()\r\n            })\r\n            .then((resData) => {\r\n                if (resData.errors) {\r\n                    dispatch(investNowFailed(resData.errors[0].message))\r\n                }\r\n\r\n                dispatch(\r\n                    investNowApprovalSuccess(\r\n                        resData.data.createInvestNowApproval\r\n                    )\r\n                )\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n                dispatch(investNowFailed(err))\r\n            })\r\n    }\r\n}\r\nexport const initWithdrawNowApproval = (id, token) => {\r\n    return (dispatch) => {\r\n        dispatch(withdrawNowStart())\r\n\r\n        let graphqlQuery = {\r\n            query: `\r\n                mutation { createWithdrawNowApproval(PostId: {\r\n                    id: \"${id}\"\r\n                }){\r\n                        _id\r\n                        amount\r\n                        currency\r\n                        creator {\r\n                            username\r\n                        }\r\n                        updatedAt\r\n                    }\r\n                },\r\n            `,\r\n        }\r\n\r\n        return fetch(URL + '/api/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(graphqlQuery),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: 'Bearer ' + token,\r\n            },\r\n        })\r\n            .then((res) => {\r\n                return res.json()\r\n            })\r\n            .then((resData) => {\r\n                if (resData.errors) {\r\n                    dispatch(withdrawNowFailed(resData.errors[0].message))\r\n                }\r\n\r\n                dispatch(\r\n                    withdrawNowApprovalSuccess(\r\n                        resData.data.createwithdrawNowApproval\r\n                    )\r\n                )\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n                dispatch(withdrawNowFailed(err))\r\n            })\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}