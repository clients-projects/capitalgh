{"ast":null,"code":"import _slicedToArray from \"/home/niscolinx/projects/fxcrypto/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/niscolinx/projects/fxcrypto/client/src/views/Dashboard.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport ChartistGraph from 'react-chartist';\nimport { Grid, Row, Col } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { Card } from '../components/Card/Card';\nimport { StatsCard } from '../components/StatsCard/StatsCard';\nimport { dataPie, legendPie } from '../variables/Variables';\nimport CrytoMarketWatch from '../tradeviewWidgets/CryptoMarketWatch';\n\nconst Dashboard = props => {\n  const createLegend = json => {\n    var legend = [];\n\n    for (var i = 0; i < json['names'].length; i++) {\n      var type = 'fa fa-circle text-' + json['types'][i];\n      legend.push( /*#__PURE__*/React.createElement(\"i\", {\n        className: type,\n        key: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 25\n        }\n      }));\n      legend.push(' ');\n      legend.push(json['names'][i]);\n    }\n\n    return legend;\n  }; //Have to fetch the user account balance\n\n\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        userAccountBalance = _useState2[0],\n        setUserAccountBalance = _useState2[1];\n\n  const _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        totalUserDeposits = _useState4[0],\n        setTotalUserDeposits = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        totalUserWithdrawals = _useState6[0],\n        setTotalUserWithdrawals = _useState6[1];\n\n  const _useState7 = useState(0),\n        _useState8 = _slicedToArray(_useState7, 2),\n        fundAccountCount = _useState8[0],\n        setFundAccountCount = _useState8[1];\n\n  useEffect(() => {\n    if (props.userData.hasOwnProperty('username')) {\n      setUserAccountBalance(props.userData.accountBalance);\n      const keepProfits = 0;\n      console.log(props.userDeposits);\n      props.userDeposits.map(p);\n    }\n\n    if (props.totalUserDeposits) {\n      setTotalUserDeposits(props.totalUserDeposits);\n      setTotalUserWithdrawals(props.totalUserWithdrawals);\n      setFundAccountCount(props.fundAccountCount);\n    }\n  }, [props]);\n  const displayUserFunds = \"$\".concat(userAccountBalance);\n  const displayUserDeposits = \"$\".concat(totalUserDeposits);\n  const displayUserWithdrawals = \"$\".concat(totalUserWithdrawals);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    lg: 3,\n    sm: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(StatsCard, {\n    bigIcon: /*#__PURE__*/React.createElement(\"i\", {\n      className: \"pe-7s-server text-warning\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 37\n      }\n    }),\n    statsText: \"Account Balance\",\n    statsValue: displayUserFunds,\n    statsIcon: /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fa fa-refresh\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 44\n      }\n    }),\n    statsIconText: \"Updated now\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    lg: 3,\n    sm: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(StatsCard, {\n    bigIcon: /*#__PURE__*/React.createElement(\"i\", {\n      className: \"pe-7s-wallet text-success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 37\n      }\n    }),\n    statsText: \"Total Withdrawal\",\n    statsValue: displayUserWithdrawals,\n    statsIcon: /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fa fa-calendar-o\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 44\n      }\n    }),\n    statsIconText: \"Updated now\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    lg: 3,\n    sm: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(StatsCard, {\n    bigIcon: /*#__PURE__*/React.createElement(\"i\", {\n      className: \"pe-7s-graph1 text-danger\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 37\n      }\n    }),\n    statsText: \"Total Deposit\",\n    statsValue: displayUserDeposits,\n    statsIcon: /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fa fa-clock-o\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 44\n      }\n    }),\n    statsIconText: \"Updated now\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    lg: 3,\n    sm: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(StatsCard, {\n    bigIcon: /*#__PURE__*/React.createElement(\"i\", {\n      className: \"pe-7s-cash text-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 42\n      }\n    }),\n    statsText: \"Funds Approved\",\n    statsValue: fundAccountCount,\n    statsIcon: /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fa fa-refresh\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 44\n      }\n    }),\n    statsIconText: \"Updated now\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 29\n    }\n  }))), /*#__PURE__*/React.createElement(Row, {\n    style: {\n      marginTop: '4rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: '70vh'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(CrytoMarketWatch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 33\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    md: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    statsIcon: \"fa fa-clock-o\",\n    title: \"Transactions\",\n    category: \"investment activities\",\n    stats: \"Updated now\",\n    content: /*#__PURE__*/React.createElement(\"div\", {\n      id: \"chartPreferences\",\n      className: \"ct-chart ct-perfect-fourth\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(ChartistGraph, {\n      data: dataPie,\n      type: \"Pie\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 41\n      }\n    })),\n    legend: /*#__PURE__*/React.createElement(\"div\", {\n      className: \"legend\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 37\n      }\n    }, createLegend(legendPie)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 29\n    }\n  })))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    err: state.auth.error,\n    loading: state.user.loading,\n    tokenId: state.auth.tokenId,\n    userData: state.auth.userData,\n    userFundAccount: state.auth.userFundAccount,\n    userId: state.auth.userId,\n    totalUserDeposits: state.auth.totalUserDeposits,\n    userDeposits: state.auth.userDeposits,\n    totalUserWithdrawals: state.auth.totalUserWithdrawals,\n    fundAccountCount: state.auth.fundAccountCount\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {//onInitGetUser: (token) => dispatch(actionTypes.initGetUser(token)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);","map":{"version":3,"sources":["/home/niscolinx/projects/fxcrypto/client/src/views/Dashboard.jsx"],"names":["React","useState","useEffect","ChartistGraph","Grid","Row","Col","connect","Card","StatsCard","dataPie","legendPie","CrytoMarketWatch","Dashboard","props","createLegend","json","legend","i","length","type","push","userAccountBalance","setUserAccountBalance","totalUserDeposits","setTotalUserDeposits","totalUserWithdrawals","setTotalUserWithdrawals","fundAccountCount","setFundAccountCount","userData","hasOwnProperty","accountBalance","keepProfits","console","log","userDeposits","map","p","displayUserFunds","displayUserDeposits","displayUserWithdrawals","marginTop","height","mapStateToProps","state","err","auth","error","loading","user","tokenId","userFundAccount","userId","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport ChartistGraph from 'react-chartist'\nimport { Grid, Row, Col } from 'react-bootstrap'\nimport { connect } from 'react-redux'\n\nimport { Card } from '../components/Card/Card'\nimport { StatsCard } from '../components/StatsCard/StatsCard'\nimport { dataPie, legendPie } from '../variables/Variables'\n\nimport CrytoMarketWatch from '../tradeviewWidgets/CryptoMarketWatch'\n\nconst Dashboard = (props) => {\n   const createLegend = (json) =>{\n        var legend = []\n        for (var i = 0; i < json['names'].length; i++) {\n            var type = 'fa fa-circle text-' + json['types'][i]\n            legend.push(<i className={type} key={i} />)\n            legend.push(' ')\n            legend.push(json['names'][i])\n        }\n        return legend\n    }\n\n    //Have to fetch the user account balance\n    const [userAccountBalance, setUserAccountBalance] = useState(0)\n    const [totalUserDeposits, setTotalUserDeposits] = useState(0)\n    const [totalUserWithdrawals, setTotalUserWithdrawals] = useState(0)\n    const [fundAccountCount, setFundAccountCount] = useState(0)\n    \n    useEffect(() => {\n        if(props.userData.hasOwnProperty('username')){\n            setUserAccountBalance(props.userData.accountBalance)\n\n            const keepProfits = 0\n            console.log(props.userDeposits)\n\n            props.userDeposits.map((p))\n        }\n\n        if(props.totalUserDeposits){\n            setTotalUserDeposits(props.totalUserDeposits)\n            setTotalUserWithdrawals(props.totalUserWithdrawals)\n            setFundAccountCount(props.fundAccountCount)\n        }\n    }, [props])\n\n    const displayUserFunds = `$${userAccountBalance}`\n    const displayUserDeposits = `$${totalUserDeposits}`\n    const displayUserWithdrawals = `$${totalUserWithdrawals}`\n\n        return (\n            <div className='content'>\n                <Grid fluid>\n                    <Row>\n                        <Col lg={3} sm={6}>\n                            <StatsCard\n                                bigIcon={\n                                    <i className='pe-7s-server text-warning' />\n                                }\n                                statsText='Account Balance'\n                                statsValue= {displayUserFunds}\n                                statsIcon={<i className='fa fa-refresh' />}\n                                statsIconText='Updated now'\n                            />\n                        </Col>\n                        <Col lg={3} sm={6}>\n                            <StatsCard\n                                bigIcon={\n                                    <i className='pe-7s-wallet text-success' />\n                                }\n                                statsText='Total Withdrawal'\n                                statsValue={displayUserWithdrawals}\n                                statsIcon={<i className='fa fa-calendar-o' />}\n                                statsIconText='Updated now'\n                            />\n                        </Col>\n                        <Col lg={3} sm={6}>\n                            <StatsCard\n                                bigIcon={\n                                    <i className='pe-7s-graph1 text-danger' />\n                                }\n                                statsText='Total Deposit'\n                                statsValue={displayUserDeposits}\n                                statsIcon={<i className='fa fa-clock-o' />}\n                                statsIconText='Updated now'\n                            />\n                        </Col>\n                        <Col lg={3} sm={6}>\n                            <StatsCard\n                                bigIcon={<i className='pe-7s-cash text-info' />}\n                                statsText='Funds Approved'\n                                statsValue={fundAccountCount}\n                                statsIcon={<i className='fa fa-refresh' />}\n                                statsIconText='Updated now'\n                            />\n                        </Col>\n                    </Row>\n                    <Row style={{ marginTop: '4rem' }}>\n                        <Col md={8}>\n                            <div style={{ height: '70vh' }}>\n                                <CrytoMarketWatch />\n                            </div>\n                        </Col>\n                        <Col md={4}>\n                            <Card\n                                statsIcon='fa fa-clock-o'\n                                title='Transactions'\n                                category='investment activities'\n                                stats='Updated now'\n                                content={\n                                    <div\n                                        id='chartPreferences'\n                                        className='ct-chart ct-perfect-fourth'\n                                    >\n                                        <ChartistGraph\n                                            data={dataPie}\n                                            type='Pie'\n                                        />\n                                    </div>\n                                }\n                                legend={\n                                    <div className='legend'>\n                                        {createLegend(legendPie)}\n                                    </div>\n                                }\n                            />\n                        </Col>\n                    </Row>\n                </Grid>\n            </div>\n        )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        err: state.auth.error,\n        loading: state.user.loading,\n        tokenId: state.auth.tokenId,\n        userData: state.auth.userData,\n        userFundAccount: state.auth.userFundAccount,\n        userId: state.auth.userId,\n        totalUserDeposits: state.auth.totalUserDeposits,\n        userDeposits: state.auth.userDeposits,\n        totalUserWithdrawals: state.auth.totalUserWithdrawals,\n        fundAccountCount: state.auth.fundAccountCount,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        //onInitGetUser: (token) => dispatch(actionTypes.initGetUser(token)),\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard)\n"]},"metadata":{},"sourceType":"module"}