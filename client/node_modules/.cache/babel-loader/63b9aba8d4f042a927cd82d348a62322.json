{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/niscolinx/projects/fxcrypto/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/niscolinx/projects/fxcrypto/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/niscolinx/projects/fxcrypto/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/niscolinx/projects/fxcrypto/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loadPolygonMaskPlugin = void 0;\n\nvar PolygonMaskInstance_1 = require(\"./PolygonMaskInstance\");\n\nvar PolygonMask_1 = require(\"./Options/Classes/PolygonMask\");\n\nvar Enums_1 = require(\"./Enums\");\n\nvar Utils_1 = require(\"../../Utils\");\n\nvar Plugin = /*#__PURE__*/function () {\n  function Plugin() {\n    _classCallCheck(this, Plugin);\n\n    this.id = \"polygonMask\";\n  }\n\n  _createClass(Plugin, [{\n    key: \"getPlugin\",\n    value: function getPlugin(container) {\n      return new PolygonMaskInstance_1.PolygonMaskInstance(container);\n    }\n  }, {\n    key: \"needsPlugin\",\n    value: function needsPlugin(options) {\n      var _a, _b, _c;\n\n      return (_b = (_a = options === null || options === void 0 ? void 0 : options.polygon) === null || _a === void 0 ? void 0 : _a.enable) !== null && _b !== void 0 ? _b : ((_c = options === null || options === void 0 ? void 0 : options.polygon) === null || _c === void 0 ? void 0 : _c.type) !== undefined && options.polygon.type !== Enums_1.Type.none;\n    }\n  }, {\n    key: \"loadOptions\",\n    value: function loadOptions(options, source) {\n      if (!this.needsPlugin(source)) {\n        return;\n      }\n\n      var optionsCast = options;\n      var polygonOptions = optionsCast.polygon;\n\n      if ((polygonOptions === null || polygonOptions === void 0 ? void 0 : polygonOptions.load) === undefined) {\n        optionsCast.polygon = polygonOptions = new PolygonMask_1.PolygonMask();\n      }\n\n      polygonOptions.load(source === null || source === void 0 ? void 0 : source.polygon);\n    }\n  }]);\n\n  return Plugin;\n}();\n\nfunction loadPolygonMaskPlugin(_x) {\n  return _loadPolygonMaskPlugin.apply(this, arguments);\n}\n\nfunction _loadPolygonMaskPlugin() {\n  _loadPolygonMaskPlugin = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tsParticles) {\n    var plugin;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(!(0, Utils_1.isSsr)() && !window.SVGPathSeg)) {\n              _context.next = 3;\n              break;\n            }\n\n            _context.next = 3;\n            return Promise.resolve().then(function () {\n              return __importStar(require(\"./pathseg\"));\n            });\n\n          case 3:\n            plugin = new Plugin();\n            _context.next = 6;\n            return tsParticles.addPlugin(plugin);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _loadPolygonMaskPlugin.apply(this, arguments);\n}\n\nexports.loadPolygonMaskPlugin = loadPolygonMaskPlugin;","map":null,"metadata":{},"sourceType":"script"}