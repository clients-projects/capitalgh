{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/niscolinx/projects/fxcryptotokeninvestment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/niscolinx/projects/fxcryptotokeninvestment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"/home/niscolinx/projects/fxcryptotokeninvestment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"/home/niscolinx/projects/fxcryptotokeninvestment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"/home/niscolinx/projects/fxcryptotokeninvestment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/niscolinx/projects/fxcryptotokeninvestment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CircleWarp = void 0;\n\nvar Rectangle_1 = require(\"./Rectangle\");\n\nvar Circle_1 = require(\"./Circle\");\n\nvar CircleWarp = /*#__PURE__*/function (_Circle_1$Circle) {\n  _inherits(CircleWarp, _Circle_1$Circle);\n\n  var _super = _createSuper(CircleWarp);\n\n  function CircleWarp(x, y, radius, canvasSize) {\n    var _this;\n\n    _classCallCheck(this, CircleWarp);\n\n    _this = _super.call(this, x, y, radius);\n    _this.canvasSize = canvasSize;\n    _this.canvasSize = {\n      height: canvasSize.height,\n      width: canvasSize.width\n    };\n    return _this;\n  }\n\n  _createClass(CircleWarp, [{\n    key: \"contains\",\n    value: function contains(point) {\n      if (_get(_getPrototypeOf(CircleWarp.prototype), \"contains\", this).call(this, point)) {\n        return true;\n      }\n\n      var posNE = {\n        x: point.x - this.canvasSize.width,\n        y: point.y\n      };\n\n      if (_get(_getPrototypeOf(CircleWarp.prototype), \"contains\", this).call(this, posNE)) {\n        return true;\n      }\n\n      var posSE = {\n        x: point.x - this.canvasSize.width,\n        y: point.y - this.canvasSize.height\n      };\n\n      if (_get(_getPrototypeOf(CircleWarp.prototype), \"contains\", this).call(this, posSE)) {\n        return true;\n      }\n\n      var posSW = {\n        x: point.x,\n        y: point.y - this.canvasSize.height\n      };\n      return _get(_getPrototypeOf(CircleWarp.prototype), \"contains\", this).call(this, posSW);\n    }\n  }, {\n    key: \"intersects\",\n    value: function intersects(range) {\n      if (_get(_getPrototypeOf(CircleWarp.prototype), \"intersects\", this).call(this, range)) {\n        return true;\n      }\n\n      var rect = range;\n      var circle = range;\n      var newPos = {\n        x: range.position.x - this.canvasSize.width,\n        y: range.position.y - this.canvasSize.height\n      };\n\n      if (circle.radius !== undefined) {\n        var biggerCircle = new Circle_1.Circle(newPos.x, newPos.y, circle.radius * 2);\n        return _get(_getPrototypeOf(CircleWarp.prototype), \"intersects\", this).call(this, biggerCircle);\n      } else if (rect.size !== undefined) {\n        var rectSW = new Rectangle_1.Rectangle(newPos.x, newPos.y, rect.size.width * 2, rect.size.height * 2);\n        return _get(_getPrototypeOf(CircleWarp.prototype), \"intersects\", this).call(this, rectSW);\n      }\n\n      return false;\n    }\n  }]);\n\n  return CircleWarp;\n}(Circle_1.Circle);\n\nexports.CircleWarp = CircleWarp;","map":null,"metadata":{},"sourceType":"script"}