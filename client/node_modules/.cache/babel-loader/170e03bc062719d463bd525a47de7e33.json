{"ast":null,"code":"import _slicedToArray from \"/home/niscolinx/projects/fxcrypto/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/niscolinx/projects/fxcrypto/client/src/views/Withdraw.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { StatsCard } from '../components/StatsCard/StatsCard';\nimport * as orderAction from '../store/actions/burgerIndex';\n\nconst Withdraw = props => {\n  let _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      amount = _useState2[0],\n      setAmount = _useState2[1];\n\n  const _useState3 = useState('Bitcoin'),\n        _useState4 = _slicedToArray(_useState3, 2),\n        currency = _useState4[0],\n        setCurrency = _useState4[1];\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        message = _useState6[0],\n        setMessage = _useState6[1];\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        error = _useState8[0],\n        setError = _useState8[1];\n\n  const _useState9 = useState(0),\n        _useState10 = _slicedToArray(_useState9, 2),\n        userAccountBalance = _useState10[0],\n        setUserAccountBalance = _useState10[1];\n\n  useEffect(() => {\n    if (props.userData.hasOwnProperty('username')) {\n      setUserAccountBalance(props.userData.accountBalance);\n    }\n  }, [props]);\n\n  const handleAmountChange = e => {\n    setAmount(e.target.value);\n  };\n\n  const handleSelectChange = e => {\n    setCurrency(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    amount = Number(amount);\n\n    if (amount > userAccountBalance) {\n      setMessage('Insufficiant Balance');\n      setError(true);\n    } else {\n      setMessage('Withdrawal sent, Your withdrawal will reflect in your account after we have confirmed it, thanks!! ');\n      setError(false);\n      const formData = {\n        amount,\n        currency\n      };\n      props.onInitWithdrawNow(formData, props.tokenId);\n    }\n  };\n\n  const displayAccountBalance = \"$\".concat(userAccountBalance);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"fundAccount\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    className: \"fundAccount__balance\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    lg: 12,\n    sm: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(StatsCard, {\n    bigIcon: /*#__PURE__*/React.createElement(\"i\", {\n      className: \"pe-7s-server text-warning\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 33\n      }\n    }),\n    statsText: \"Account Balance\",\n    statsValue: displayAccountBalance,\n    statsIcon: /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fa fa-refresh\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 40\n      }\n    }),\n    statsIconText: \"Updated now\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"fundAccount__form\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }\n  }, message && /*#__PURE__*/React.createElement(\"p\", {\n    className: error ? 'message message__error' : 'message',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 25\n    }\n  }, message), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"number\",\n    className: \"fundAccount__form--input\",\n    placeholder: \"Amount to Withdraw\",\n    name: \"amount\",\n    id: \"amount\",\n    onChange: handleAmountChange,\n    value: amount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"select\", {\n    name: \"select\",\n    id: \"select\",\n    onChange: handleSelectChange,\n    value: currency,\n    className: \"fundAccount__form--select\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Bitcoin\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 25\n    }\n  }, \"Bitcoin\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Ethereum\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 25\n    }\n  }, \"Ethereum\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"fundAccount__form--btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 25\n    }\n  }, \"Confirm\")))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    tokenId: state.auth.tokenId,\n    userData: state.auth.userData,\n    userId: state.auth.userId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onInitWithdrawNow: (data, token) => dispatch(orderAction.initWithdrawNow(data, token))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Withdraw);","map":{"version":3,"sources":["/home/niscolinx/projects/fxcrypto/client/src/views/Withdraw.jsx"],"names":["React","useState","useEffect","Row","Col","connect","StatsCard","orderAction","Withdraw","props","amount","setAmount","currency","setCurrency","message","setMessage","error","setError","userAccountBalance","setUserAccountBalance","userData","hasOwnProperty","accountBalance","handleAmountChange","e","target","value","handleSelectChange","handleSubmit","preventDefault","Number","formData","onInitWithdrawNow","tokenId","displayAccountBalance","mapStateToProps","state","auth","userId","mapDispatchToProps","dispatch","data","token","initWithdrawNow"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Row, Col } from 'react-bootstrap'\nimport { connect } from 'react-redux'\n\nimport { StatsCard } from '../components/StatsCard/StatsCard'\nimport * as orderAction from '../store/actions/burgerIndex'\n\nconst Withdraw = (props) => {\n    let [amount, setAmount] = useState('')\n    const [currency, setCurrency] = useState('Bitcoin')\n    const [message, setMessage] = useState('')\n    const [error, setError] = useState(false)\n    const [userAccountBalance, setUserAccountBalance] = useState(0)\n\n    useEffect(() => {\n        if (props.userData.hasOwnProperty('username')) {\n\n            setUserAccountBalance(props.userData.accountBalance)\n        }\n    }, [props])\n\n    const handleAmountChange = (e) => {\n        setAmount(e.target.value)\n    }\n    const handleSelectChange = (e) => {\n        setCurrency(e.target.value)\n    }\n \n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n\n        amount = Number(amount)\n\n        if (amount > userAccountBalance) {\n            setMessage('Insufficiant Balance')\n            setError(true)\n        } else {\n            setMessage(\n                'Withdrawal sent, Your withdrawal will reflect in your account after we have confirmed it, thanks!! '\n            )\n            setError(false)\n             const formData = {\n                 amount,\n                 currency             }\n\n             props.onInitWithdrawNow(formData, props.tokenId)\n        }\n    \n    }\n\n    const displayAccountBalance = `$${userAccountBalance}`\n\n    return (\n        <>\n            <div className='fundAccount'>\n                <Row className='fundAccount__balance'>\n                    <Col lg={12} sm={12}>\n                        <StatsCard\n                            bigIcon={\n                                <i className='pe-7s-server text-warning' />\n                            }\n                            statsText='Account Balance'\n                            statsValue={displayAccountBalance}\n                            statsIcon={<i className='fa fa-refresh' />}\n                            statsIconText='Updated now'\n                        />\n                    </Col>\n                </Row>\n                <form className='fundAccount__form' onSubmit={handleSubmit}>\n                    {message && (\n                        <p\n                            className={\n                                error ? 'message message__error' : 'message'\n                            }\n                        >\n                            {message}\n                        </p>\n                    )}\n                    <input\n                        type='number'\n                        className='fundAccount__form--input'\n                        placeholder='Amount to Withdraw'\n                        name='amount'\n                        id='amount'\n                        onChange={handleAmountChange}\n                        value={amount}\n                    />\n                 \n\n                    <select\n                        name='select'\n                        id='select'\n                        onChange={handleSelectChange}\n                        value={currency}\n                        className='fundAccount__form--select'\n                    >\n                        <option value='Bitcoin'>Bitcoin</option>\n                        <option value='Ethereum'>Ethereum</option>\n                    </select>\n\n                    <div className='fundAccount__form--btn'>\n                        <button className='button' type='submit'>\n                            Confirm\n                        </button>\n                    </div>\n                </form>\n            </div>\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        tokenId: state.auth.tokenId,\n        userData: state.auth.userData,\n        userId: state.auth.userId,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onInitWithdrawNow: (data, token) =>\n            dispatch(orderAction.initWithdrawNow(data, token)),\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Withdraw)\n"]},"metadata":{},"sourceType":"module"}