{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/niscolinx/projects/fxcryptotokeninvestment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/niscolinx/projects/fxcryptotokeninvestment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TiltUpdater = void 0;\n\nvar Enums_1 = require(\"../../Enums\");\n\nvar Utils_1 = require(\"../../Utils\");\n\nfunction updateTilt(particle, delta) {\n  var _a;\n\n  if (!particle.tilt) {\n    return;\n  }\n\n  var tilt = particle.options.tilt;\n  var tiltAnimation = tilt.animation;\n  var speed = ((_a = particle.tilt.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n  var max = 2 * Math.PI;\n\n  if (!tiltAnimation.enable) {\n    return;\n  }\n\n  switch (particle.tilt.status) {\n    case Enums_1.AnimationStatus.increasing:\n      particle.tilt.value += speed;\n\n      if (particle.tilt.value > max) {\n        particle.tilt.value -= max;\n      }\n\n      break;\n\n    case Enums_1.AnimationStatus.decreasing:\n    default:\n      particle.tilt.value -= speed;\n\n      if (particle.tilt.value < 0) {\n        particle.tilt.value += max;\n      }\n\n      break;\n  }\n}\n\nvar TiltUpdater = /*#__PURE__*/function () {\n  function TiltUpdater(container) {\n    _classCallCheck(this, TiltUpdater);\n\n    this.container = container;\n  }\n\n  _createClass(TiltUpdater, [{\n    key: \"init\",\n    value: function init(particle) {\n      var tiltOptions = particle.options.tilt;\n      particle.tilt = {\n        enable: tiltOptions.enable,\n        value: (0, Utils_1.getRangeValue)(tiltOptions.value) * Math.PI / 180,\n        sinDirection: Math.random() >= 0.5 ? 1 : -1,\n        cosDirection: Math.random() >= 0.5 ? 1 : -1\n      };\n      var tiltDirection = tiltOptions.direction;\n\n      if (tiltDirection === Enums_1.TiltDirection.random) {\n        var index = Math.floor(Math.random() * 2);\n        tiltDirection = index > 0 ? Enums_1.TiltDirection.counterClockwise : Enums_1.TiltDirection.clockwise;\n      }\n\n      switch (tiltDirection) {\n        case Enums_1.TiltDirection.counterClockwise:\n        case \"counterClockwise\":\n          particle.tilt.status = Enums_1.AnimationStatus.decreasing;\n          break;\n\n        case Enums_1.TiltDirection.clockwise:\n          particle.tilt.status = Enums_1.AnimationStatus.increasing;\n          break;\n      }\n\n      var tiltAnimation = particle.options.tilt.animation;\n\n      if (tiltAnimation.enable) {\n        particle.tilt.velocity = tiltAnimation.speed / 360 * this.container.retina.reduceFactor;\n\n        if (!tiltAnimation.sync) {\n          particle.tilt.velocity *= Math.random();\n        }\n      }\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled(particle) {\n      var tilt = particle.options.tilt;\n      var tiltAnimation = tilt.animation;\n      return !particle.destroyed && !particle.spawning && tiltAnimation.enable;\n    }\n  }, {\n    key: \"update\",\n    value: function update(particle, delta) {\n      if (!this.isEnabled(particle)) {\n        return;\n      }\n\n      updateTilt(particle, delta);\n    }\n  }]);\n\n  return TiltUpdater;\n}();\n\nexports.TiltUpdater = TiltUpdater;","map":null,"metadata":{},"sourceType":"script"}